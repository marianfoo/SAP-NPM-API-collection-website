{
  "packages": [
    {
      "name": "abap-deploy",
      "type": "module",
      "gitHubOwner": "gregorwolf",
      "gitHubRepo": "SAP-NPM-API-collection",
      "forks": 6,
      "stars": 15,
      "addedToBoUI5": "",
      "createdAt": "2018-09-07T15:27:07Z",
      "updatedAt": "2022-04-28T12:42:58Z",
      "readme": "# abap-deploy\n\n## Installation\n\n```\nnpm install @sap/abap-deploy\n```\n\n## Simple Usage\n\n- execute `abap-deploy` in your terminal and answer the questions in the terminal.\n- or `abap-deploy --help` to explore the CLI Options.\n\n### Running CLI on local environment\n\n#### Prerequisite:\n\nIn order to run the abap-deploy CLI on your local environment, you need to add SAP Global Root CA Certificate to your trusted certificate list.\nThis can be achieved by navigating to your SAP System using your browser (e.g. `https://<host>:<port>/sap/bc/adt/discovery`), exporting the certificate from your browser, and then adding it to NODE_EXTRA_CA_CERTS\nYou can find more details in here: `https://help.sap.com/viewer/a9f57505bbb34a6da3c5ba3a49d409d8/Latest/en-US/4b318bede7eb4021a8be385c46c74045.html`\n\n- Add: \"@sap/abap-deploy\": \"`<version>`\" to devDependencies section of your project's package.json\n- Execute `npm install`\n- Execute `npm run build`\n- Execute `abap-deploy` in your terminal and answer the questions in the terminal.\n\nNote: When requested to provide Target System url make sure you are using https and not http.\n\n## In Depth Guide\n\n### Interactive mode\n\nBy default the abap-deploy tool will ask the user for any missing configuration.\n\n### CLI Arguments\n\nConfiguration options may be passed as command line arguments, e.g:\n`abap-deploy --targetSystem=https://foo.com --client=010`\n\nThe list of CLI options can be printed by running `abap-deploy --help`\n\nCLI arguments may be useful to avoid re-typing the same values or to inject values from environment variables for certain options.\n\n### Configuration files\n\nAny configuration options that can be set via the command line can also be specified within a separate configuration file. A variety of default config files flavors are available:\n\n| File name               | File Association |\n| ----------------------- | ---------------- |\n| `.abap-deployrc`        | JSON or YAML     |\n| `.abap-deployrc.json`   | JSON             |\n| `.abap-deployrc.yaml`   | YAML             |\n| `.abap-deployrc.yml`    | YAML             |\n| `.abap-deployrc.js`     | CommonJS export  |\n| `abap-deploy.config.js` | CommonJS export  |\n\nThese default configuration files will be searched \"upwards\" starting from the CWD.\n\n#### Custom Name Configuration Files.\n\nA specific configuration file path may be provided using the configPath option, e.g:\n\n- `abap-deploy --config-path=./my-custom.config.json`\n\nMultiple custom name configuration files may be useful to manage presets of deployment\nscenarios, e.g `test` vs `productive` systems.\n\n#### package.json configuration\n\nThe configuration can also be embedded in the project's package.json inside the \"abap-deploy\" key, e.g:\n\n- ```json\n  {\n    \"name\": \"myApp\",\n    \"version\": \"0.2.0\",\n    \"dependencies\": {},\n    \"devDependencies\": {},\n    \"abap-deploy\": {}\n  }\n  ```\n\n#### Sample JSON Configuration File\n\n```json\n{\n  \"deploy\": {\n    \"sourceFolder\": \"./dist\",\n    \"targetSystem\": \"http://abc.com\",\n    \"client\": \"010\",\n    \"username\": \"Tom\",\n    \"password\": \"abcd1234\",\n    \"appName\": \"foo\"\n  },\n  \"cli\": {\n    \"interactiveFallBack\": false\n  }\n}\n```\n\n#### Sample YAML Configuration File\n\n```yaml\ndeploy:\n  sourceFolder: \"./dist\"\n  targetSystem: http://abc.com\n  client: \"010\"\n  username: Tom\n  password: abcd1234\n  appName: foo\ncli:\n  interactiveFallBack: false\n```\n\n### Combining Interactive / CLI / Config Files\n\nOptions from different sources have different precedence levels.\n\n- CLI arguments (e.g --source-folder) options have the highest priority and will override any other options.\n- Configuration files options are next on the priority list.\n- Interactive options are the lowest priority and will only be asked for options which have no values assigned by either CLI/Config FIle.\n\n### Options Reference\n\n#### sourceFolder\n\n|                 |                                                |\n| --------------- | ---------------------------------------------- |\n| Description     | Project's Pre-Built Artifacts Folder to Deploy |\n| Type            | String                                         |\n| CLI Name        | `--source-folder`                              |\n| CLI Alias       | `--sf`                                         |\n| Config File Key | `deploy.sourceFolder`                          |\n| Default         | `./dist` (if exists)                           |\n\n#### targetSystem\n\n|                 |                              |\n| --------------- | ---------------------------- |\n| Description     | ABAP system URL to Deploy to |\n| Type            | String                       |\n| CLI Name        | `--target-system`            |\n| CLI Alias       | `--ts`                       |\n| Config File Key | `deploy.targetSystem`        |\n\n#### client\n\n|                 |                           |\n| --------------- | ------------------------- |\n| Description     | ABAP system client number |\n| Type            | String                    |\n| CLI Name        | `--client`                |\n| CLI Alias       | `--c`                     |\n| Config File Key | `deploy.client`           |\n\n#### username\n\n|                 |                      |\n| --------------- | -------------------- |\n| Description     | ABAP System username |\n| Type            | String               |\n| CLI Name        | `--username`         |\n| CLI Alias       | `--u`                |\n| Config File Key | `deploy.username`    |\n\n#### password\n\n|                 |                      |\n| --------------- | -------------------- |\n| Description     | ABAP System password |\n| Type            | String               |\n| CLI Name        | `--password`         |\n| CLI Alias       | `--p`                |\n| Config File Key | `deploy.password`    |\n\n#### appName\n\n|                 |                                  |\n| --------------- | -------------------------------- |\n| Description     | Application Name (folder in BSP) |\n| Type            | String                           |\n| CLI Name        | `--app-name`                     |\n| CLI Alias       | `--ap`                           |\n| Config File Key | `deploy.appName`                 |\n\n#### description\n\n|                 |                         |\n| --------------- | ----------------------- |\n| Description     | Application Description |\n| Type            | String                  |\n| CLI Name        | `--description`         |\n| CLI Alias       | `--d`                   |\n| Config File Key | `deploy.description`    |\n\n#### interactiveFallBack\n\n|                 |                                                           |\n| --------------- | --------------------------------------------------------- |\n| Description     | Fallback to Interactive mode in case of missing arguments |\n| Type            | Boolean                                                   |\n| CLI Name        | `--interactive-fallback`                                  |\n| CLI Alias       | `--if`                                                    |\n| Config File Key | `cli.interactiveFallBack`                                 |\n| Default         | true                                                      |\n\n#### configPath\n\n|                 |                                     |\n| --------------- | ----------------------------------- |\n| Description     | Relative Path to Configuration file |\n| Type            | Boolean                             |\n| CLI Name        | `--config-path`                     |\n| CLI Alias       | `--cf`                              |\n| Config File Key | `cli.configPath`                    |\n| Default         | See \"Configuration Files\" section   |\n\n#### logLevel\n\n|                 |                                                                                                                                                                                           |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Description     | The level of logs to report for notification purposes. Any logs of a higher level than the logLevel setting will be written to the abap-deploy.log file in the current working directory. |\n| Type            | \"off\" or \"fatal\" or \"error\" or \"warn\" or \"info\" or \"debug\" or \"trace\"                                                                                                                     |\n| CLI Name        | `--log-level`                                                                                                                                                                             |\n| CLI Alias       | `--ll`                                                                                                                                                                                    |\n| Config File Key | `cli.logLevel`                                                                                                                                                                            |\n| Default         | \"off\"                                                                                                                                                                                     |\n\n### Support channel\n\nFor reporting an issue, open a BCP ticket with component CA-BAS-DPL-ABAP\nFor reporting a feature request, please open an influence request (https://influence.sap.com/sap/ino/#campaign/2538)\n",
      "changelog": "<a name=\"0.10.19\"></a>\n\n## [0.10.19](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.10.15...v0.10.19) (2020-12-23)\n\n### Bug Fixes\n\n- add CondenseMessagesInHttpResponseHeader parameter in update url ([#61](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/61)) ([de0f2cf](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/de0f2cf))\n- dummy version for github testing ([#59](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/59)) ([291e3e0](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/291e3e0))\n\n<a name=\"0.10.11\"></a>\n\n## [0.10.17](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.10.11...v0.10.17) (2020-11-10)\n\n### Bug Fixes\n\n- devxbugs 7825 abap-deploy does not specify condense parameter when updating\n\n<a name=\"0.10.11\"></a>\n\n## [0.10.11](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.9.5...v0.10.11) (2020-10-15)\n\n### Bug Fixes\n\n- devxbugs 7659 use dest for onpremise ([#46](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/46)) ([c19eecb](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/c19eecb))\n- devxbugs-7475 deploy fail in case app id is changed ([#47](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/47))\n\n### Features\n\n- support local NoAuth by default ([#42](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/42)) ([bd70b5c](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/bd70b5c))\n\n<a name=\"0.10.7\"></a>\n\n## [0.10.7](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.9.6...v0.10.7) (2020-08-05)\n\n### Features\n\n- Support abap deploy from local environment\n\n<a name=\"0.9.5\"></a>\n\n## [0.9.5](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.7.8...v0.9.5) (2020-07-29)\n\n### Bug Fixes\n\n- fix ([7806129](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/7806129))\n- remove sap procedures from official README file ([1e546df](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/1e546df))\n- typo error ([e68bb3d](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/e68bb3d))\n\n# [0.9.2](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.9.1...v0.9.2)\n\n### Bug Fixes\n\n- s4hana use host name and support uppercase\n\n# [0.9.0](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.7.8...v0.9.0) (2020-06-17)\n\n### Bug Fixes\n\n- fix header content-type ([8cc1212](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/8cc121285990f3f0fe14a1f33297771c0dc21b74))\n\n### Features\n\n- handle valid ato response and tests ([1e01f80](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/1e01f80e12e8d2c94ac0d846bb7a9c9b8f67127b))\n- [DEVXTOKYO-1673] Deploy Fiori app to S4Cloud sys ([e1699b8](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/e1699b872f496ba8c39da7582c1cbc086e3cfa7b))\n\n# [0.7.8](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.7.3...v0.7.8) (2020-06-03)\n\n### Bug Fixes\n\n- encode customer namespace\n- update string + remove odata_abap usage in deploy ([79fa61b](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/79fa61b9c66825db42feb22a5fce005cb76f56db))\n- update string + remove odata_abap usage in deploy ([ed3e691](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/ed3e691bd65a3eb17cff4d8e680629f2c7b6351e))\n\n## [0.7.3](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.6.2...v0.7.3) (2020-05-06)\n\n### Bug Fixes\n\n- bug undefined transport ([#22](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/22)) ([143851c](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/143851c99929b4051a8da94ccae3411deae1686a))\n\n### Features\n\n- enhance console output in success flow and add warnings ([#23](https://github.wdf.sap.corp/devx-wing/abap-deploy/issues/23)) ([c7fe6f8](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/c7fe6f883220f7420db9e7afe4846b450fc3d87d))\n\n## [0.7.1](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.7.0...v0.7.1) (2020-05-05)\n\n### Features\n\n- enhance console output in success flow and add warnings ([983cd42](https://github.wdf.sap.corp/devx-wing/abap-deploy/commit/983cd42e825edc439e970946c7d6b43f42a626ec))\n\n<a name=\"0.7.0\"></a>\n\n# [0.7.0](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.6.2...v0.7.0) (2020-05-05)\n\n### Features\n\n- Support deploy to steampunk\n\n<a name=\"0.6.2\"></a>\n\n# [0.6.2](https://github.wdf.sap.corp/devx-wing/abap-deploy/compare/v0.5.1...v0.6.2) (2020-04-23)\n\n### Features\n\n- Add support for packge and transport input\n\n<a name=\"0.5.0\"></a>\n\n# [0.5.0](https://github.tools.sap/devx-wing/abap-deploy/compare/v0.4.0...v0.5.0) (2020-01-05)\n\n### Bug Fixes\n\n- additional fixes for user facing strings ([9d58c94](https://github.tools.sap/devx-wing/abap-deploy/commit/9d58c94))\n\n### Features\n\n- technical writer review for some user facing strings ([#30](https://github.tools.sap/devx-wing/abap-deploy/issues/30)) ([dc19408](https://github.tools.sap/devx-wing/abap-deploy/commit/dc19408))\n- use CondenseMessagesInHttpResponseHeader url param ([cb92da8](https://github.tools.sap/devx-wing/abap-deploy/commit/cb92da8))\n\n<a name=\"0.4.0\"></a>\n\n# [0.4.0](https://github.tools.sap/devx-wing/abap-deploy/compare/v0.3.0...v0.4.0) (2019-12-30)\n\n### Bug Fixes\n\n- add return before sendDeploy ([7f0dafb](https://github.tools.sap/devx-wing/abap-deploy/commit/7f0dafb))\n\n### Features\n\n- add description Option ([757b462](https://github.tools.sap/devx-wing/abap-deploy/commit/757b462))\n- description validation ([#26](https://github.tools.sap/devx-wing/abap-deploy/issues/26)) ([b73949c](https://github.tools.sap/devx-wing/abap-deploy/commit/b73949c))\n- handle deploy Error Details as plain text ([1ba3036](https://github.tools.sap/devx-wing/abap-deploy/commit/1ba3036))\n- support namespace and Application name validation ([56e1aca](https://github.tools.sap/devx-wing/abap-deploy/commit/56e1aca))\n\n<a name=\"0.3.0\"></a>\n\n# [0.3.0](https://github.tools.sap/devx-wing/abap-deploy/compare/v0.2.0...v0.3.0) (2019-12-18)\n\n### Bug Fixes\n\n- clear Error Msg when the session cookie is missing ([e6a119a](https://github.tools.sap/devx-wing/abap-deploy/commit/e6a119a))\n- do not print `undefined` for system without client ([8d17719](https://github.tools.sap/devx-wing/abap-deploy/commit/8d17719))\n\n### Features\n\n- getAppStatus even if an appName has been provided by config/args ([ff7a286](https://github.tools.sap/devx-wing/abap-deploy/commit/ff7a286))\n- isAlive visual indicator during network requests ([7df8561](https://github.tools.sap/devx-wing/abap-deploy/commit/7df8561))\n- print Error In Bright Red ([904393f](https://github.tools.sap/devx-wing/abap-deploy/commit/904393f))\n- print Mode(create/update) and appName used before deploy requests ([5be1450](https://github.tools.sap/devx-wing/abap-deploy/commit/5be1450))\n\n<a name=\"0.2.0\"></a>\n\n# [0.2.0](https://github.tools.sap/devx-wing/abap-deploy/compare/v0.1.0...v0.2.0) (2019-12-17)\n\n### Features\n\n- display ABAP Error Details (if available) ([a372dc1](https://github.tools.sap/devx-wing/abap-deploy/commit/a372dc1))\n\n<a name=\"0.1.0\"></a>\n\n# 0.1.0 (2019-12-17)\n\n- Initial Version\n"
    },
    {
      "name": "apihub-service-provider",
      "type": "module",
      "gitHubOwner": "gregorwolf",
      "gitHubRepo": "SAP-NPM-API-collection",
      "forks": 6,
      "stars": 15,
      "addedToBoUI5": "",
      "createdAt": "2018-09-07T15:27:07Z",
      "updatedAt": "2022-04-28T12:42:58Z",
      "readme": "\n# The apihub-service-provider Repository\n\nThis repository reveals the 'SAP API Business Hub' service provider that can be used for local development.\n\nThe service provider extends the 'Consume-Services', which prompts the user to enter information to extend the generated project.\n\nThe 'SAP API Business Hub' service provider prompts the user to enter input to populate the generated project. After entering the input, the project, which consumes data from the SAP API Business Hub can be built and run.\n\nThe 'SAP API Business Hub' service provider provides a \"modules.json\" file for the 'Consume-services' to discover and prompt its questions. \n\nThe *modules.json* file includes the following parameters: \n\n```\n{\n  \"serviceProvider\": [\n    {\n      \"name\": \"SAP API Business Hub\", \t// The displayed name in the yeoman-based prompt as part of the service provider's list.\n      \"path\": \"/extbin/serviceProviders/apihub-service-provider\", \t// The path to the service provider's package.\n      \"entryPoint\": { \t\t\t// The main entry point to trigger the specific service provider's logic.\n        \"class\": \"ApihubServiceProvider\",\n        \"method\": \"apihubServiceProviderPrompt\"\n      }\n    }\n  ]\n}\n```\n\nThe 'SAP API Business Hub' service provider returns the following JSON containing the connectivity details below.\n \n```\nConnectivityDetails {\n  destination: { Name: \"apihub_sandbox\" },\n  serviceURL: \"/dummyPath\",\n  apiKey: \"dummyApiKey\",\n  serviceMetadata: {\n    odataContent: \"<dummyXML></dummyXML>\" \n    }\n}\n```\n\n# Public APIs\n\n### getListODataServices\n**Description:** *Provides a list of OData services for 'SAP API Business Hub'*  \n**Signiture:** ```async function getListODataServices()```  \n**Input:** none  \n**Output:** Json object containing array of OData services  \n\n### getApihubKey\n**Description:** *Retrieves an APIhub key from 'SAP API Business Hub' when passing in a valid username and password*  \n**Signiture:** ```async function getApihubKey(username: string, password: string): Promise<string>```  \n**Input:** *username:* The user's username that is used to login to 'SAP API Business Hub'  \n           *password:* The user's password that is used to login to 'SAP API Business Hub'  \n**Output:** Promise that resolves a string holding the user's apihub user key  \n\n### getMetadata\n**Description:** *Retrieves xml metadata for a specific service - as configured in the connectivityDetails.servicepath*  \n**Signiture:** ```async function getMetadata(connectivityDetails: ConnectionDetails, serviceName: string)```  \n**Input:** *connectivityDetails:* Object that contains the selected 'servicePath' and the generated 'apiHubApiKey'  \n  *serviceName:* The name of the selected service  \n**Output:** Beautified XML object including the selected service's metadata  \n\n### getListOfServiceName\n**Description:** *Retrieves a mapped list of all the OData services names for 'SAP API Business Hub'*  \n**Signiture:** ```function getListOfServiceNames(jsonServices: any): string[]```  \n**Input:** Json object including array of OData services  \n**Output:** String array of service names  \n"
    },
    {
      "name": "approuter",
      "type": "module",
      "gitHubOwner": "gregorwolf",
      "gitHubRepo": "SAP-NPM-API-collection",
      "forks": 6,
      "stars": 15,
      "addedToBoUI5": "",
      "createdAt": "2018-09-07T15:27:07Z",
      "updatedAt": "2022-04-28T12:42:58Z",
      "readme": "@sap/approuter\n==============\n\n<!-- toc -->\n\n- [Overview](#overview)\n- [Deploying a business application with microservices](#deploying-a-business-application-with-microservices)\n- [Working directory](#working-directory)\n- [Configurations](#configurations)\n  * [Destinations](#destinations)\n    + [Environment-destinations](#environment-destinations)\n    + [Destination-service](#destination-service)\n  * [UAA configuration](#uaa-configuration)\n  * [Additional headers configuration](#additional-headers-configuration)\n  * [Additional cookies configuration](#additional-cookies-configuration)\n  * [Plugins configuration](#plugins-configuration)\n  * [Session timeout configuration](#session-timeout-configuration)\n  * [X-Frame-Options configuration](#x-frame-options-configuration)\n  * [Cross-Origin Resource Sharing configuration](#cross-origin-resource-sharing-configuration)\n  * [Direct Routing URI Patterns configuration](#direct-routing-uri-patterns-configuration)\n  * [NodeJS Minimal Logging Level configuration](#nodejs-minimal-logging-level-configuration)\n- [Routes](#routes)\n  * [Example routes](#example-routes)\n- [Replacements](#replacements)\n- [*xs-app.json* configuration file](#xs-appjson-configuration-file)\n  * [*welcomeFile* property](#welcomefile-property)\n  * [*authenticationMethod* property](#authenticationmethod-property)\n  * [*routes* property](#routes-property)\n  * [*login* property](#login-property)\n  * [*logout* property](#logout-property)\n  * [*destinations* property](#destinations-property)\n  * [*services* property](#services-property)\n  * [*responseHeaders* property](#responseHeaders-property)\n  * [*compression* property](#compression-property)\n  * [*pluginMetadataEndpoint* property](#pluginmetadataendpoint-property)\n  * [*whitelistService* property](#whitelistservice-property)\n  * [*websockets* property](#websockets-property)\n  * [*errorPage* property](#errorpage-property)\n  * [*cors* property](#cors-property)\n  * [Complete example of an *xs-app.json* configuration file](#complete-example-of-an-xs-appjson-configuration-file)\n- [Headers](#headers)\n  * [Forwarding Headers](#forwarding-headers)\n  * [Hop-by-hop Headers](#hop-by-hop-headers)\n  * [Custom Headers](#custom-headers)\n  * [Authorization Header](#authorization-header)\n- [CSRF Protection](#csrf-protection)\n- [Support of SAP Statistics](#support-of-sap-statistics)\n- [Connectivity](#connectivity)\n- [SaaS Application Registration in CF](#saas-application-registration-in-cloud-foundry)\n  * [How To Expose Approuter for SaaS Subscription](#how-to-expose-approuter-for-saas-subscription)\n- [Authentication with Identity Service (IAS)](#authentication-with-identity-service-ias)\n- [Mutual TLS Authentication (mTLS) and Certificates Handling](#mutual-tls-authentication-mtls-and-certificates-handling)\n- [Integration with HTML5 Application Repository](#integration-with-html5-application-repository)\n- [Integration with Business Services](#integration-with-business-services)\n- [Web Sockets](#web-sockets)\n- [Session Handling](#session-handling)\n  * [Session Contents](#session-contents)\n- [External Session Management](#external-session-management)\n- [Service to Application Router](#service-to-application-router)\n- [Central Logout](#central-logout)\n- [User API Service](#user-api-service)\n- [Allowlist Service](#whitelist-service)\n  * [Enable the service](#enable-the-service)\n  * [Configuring allowed hostnames / domains](#configuring-allowed-hostnames--domains)\n  * [Return value](#return-value)\n- [Scaling](#scaling)\n- [Sizing Guide for Application Router](#sizing-guide-for-application-router)\n- [Configure server-side HTTPS](#configure-server-side-https)\n- [Audit-Log Service](#audit-log-service)\n- [Troubleshooting](#troubleshooting)\n- [Getting Support](#getting-support)\n- [Extending Application Router](#extending-application-router)\n- [Best practices](#best-practices)\n  * [Security best practices](#security-best-practices)\n    + [Content-Security-Policy](#content-security-policy)\n\n<!-- tocstop -->\n\n## Overview\n\nWhen a business application consists of several different apps  (microservices),\nthe application router is used to provide a single entry point to that business application.\nIt has the responsibility to:\n\n* Dispatch requests to backend microservices (reverse proxy)\n* Authenticate users\n* Serve static content\n\n\n![Application router overview diagram](doc/app-router-diagram.png \"Overview diagram\")\n\n\nLet's think of the different apps (microservices) as _destinations_ to which the incoming request will be forwarded.\nThe rules that determine which request should be forwarded to which destination are called _routes_.\nFor every destination there can be more than one route. You may read more on the concept of [routes](#routes) later in this document.\nIf the backend microservices require authentication, the application router can be configured to authenticate the users and propagate the user information.\nAgain by using routes, the application router can serve static content.\n\nThe application router is designed to work in XS Advanced - Cloud Foundry and XS OnPremise Runtime.\n\nA calling component accesses a target service by means of the application router only if there is no JWT token available, for example, \nif a user invokes the application from a Web browser.\nIf a JWT token is already available, for example, because the user has already been authenticated, or the calling component uses a JWT token for its own OAuth client,\nthe calling component calls the target service directly; it does not need to use the application router.\n\n**Note** that the application router does not hide the backend microservices in any way. They are still directly accessible bypassing the application router. So the backend microservices _must_ protect all their endpoints by validating the JWT token and implementing proper scope checks. Network isolation is not provided currently by the platform.\n\n## Deploying a business application with microservices\n\nFor example we can have a business application that has the following structure:\n\n<pre>\n+-- manifest.yml\n+-- manifest-op.yml\n|  +-- microservice-1\n|  | +-- ...\n|  | +-- ...\n|  +-- microservice-2\n|  | +-- ...\n|  | +-- ...\n|  +-- web\n|  | +-- ...\n|  | +-- ...\n</pre>\n\nThe *manifest.yml* file is used to deploy the business application on Cloud Foundry and the *manifest-op.yml* - on the XS OnPremise Runtime.\nThese files should describe all the microservices for that business application.\n\nFolders are used to isolate the different microservices. Let's assume that the application router is the microservice in the *web* folder (every business application has its own application router).\nHere is how we can include the application router:\n\n* Manually create the *node_modules* folder in the *web* folder.\n* Copy and paste the folder that contains the self-contained application router into *node_modules*. In this example the name of that folder is *@sap/approuter*, see the *start* script in the *package.json* below.\n* Check the version of the application router you just copied.\n* Create a *package.json* file in *web* with content similar to the following and replace the version's value with the version of your application router:\n\n```json\n{\n    \"name\": \"hello-world-approuter\",\n    \"dependencies\": {\n       \"@sap/approuter\": \"2.6.1\"\n    },\n    \"scripts\": {\n        \"start\": \"node node_modules/@sap/approuter/approuter.js\"\n    }\n}\n```\n\nIn order to use the application router you don't have to write any JavaScript code.\nOnly some configurations have to be provided in the *web* folder. Here is a complete example:\n\n<pre>\n+-- web\n| +-- package.json\n| +-- xs-app.json\n| +-- resources\n| | +-- hello-world.html\n| | +-- my-page.html\n| +-- node_modules\n| |   +-- ...\n| +-- default-env.json\n| +-- default-services.json\n</pre>\n\nThe *web* folder contains the *package.json*, *node_modules*, some configuration files used by the application router, and static resources to be served.\nYou can read more about the [configurations](#configurations) later in this document.\n\nBy default, the application router runs on port 5000 (if started locally) or it takes the port from the `PORT` environment variable.\n\n## Working directory\n\nThe working directory contains configuration files that the application router needs and static resources that can be served at runtime.\nIn the [previous example](#deploying-a-business-application-with-microservices), the *web* folder is the working directory.\nBy default the current directory is the working directory.\nIt is possible to configure it during start up of the application router with the following command line argument:\n\n```bash\nnode approuter.js -w <working-dir>\n```\n\nApplication router will abort if the working directory does not contain *xs-app.json* file.\n\n## Configurations\n\nThe application router makes use of the following configurations:\n\n- [Main configuration](#xs-appjson-configuration-file) - this is the *xs-app.json* file. This file is mandatory and contains the main configurations of the application router.\n\n- [UAA configuration](#uaa-configuration) - the application router reads this configuration either from the `VCAP_SERVICES` environment variable (when deployed on Cloud Foundry or XS Advanced OnPremise Runtime)\nor from the *default-services.json* file (when running locally). Refer to the documentation of the `@sap/xsenv` package for more details.\n\n- Configurations from the environment - these configurations are either read from the application router's environment (when deployed on Cloud Foundry or XS Advanced OnPremise Runtime)\nor from the *default-env.json* file (when running locally). Refer to the documentation of the `@sap/xsenv` package for more details.\nThe environment variables that the application router takes into account are:\n\n\nConfiguration | Environment variable | Description\n------------- | -------------------- | ------------\n[UAA service name](#uaa-configuration) | `UAA_SERVICE_NAME` | Contains the name of the UAA service to be used.\n[Destinations](#destinations) | `destinations` | Provides information about the available destinations.\n[Additional headers](#additional-headers-configuration) | `httpHeaders` | Provides headers that the application router will return to the client in its responses.\n[Additional cookies](#additional-cookies-configuration) | `COOKIES` | Provides cookies that the application router will return to the client in its responses. Currently only SameSite cookie is supported.\n[Plugins](#plugins-configuration) | `plugins` | A plugin is just like a [*route*](#routes) except that you can't configure some inner properties.\n[Session timeout](#session-timeout-configuration) | `SESSION_TIMEOUT` | Positive integer representing the session timeout in minutes. The default timeout is 15 minutes.\n[X-Frame-Options](#x-frame-options-configuration) | `SEND_XFRAMEOPTIONS`, `httpHeaders` | Configuration for the X-Frame-Options header value.\n[Allowlist service](#whitelist-service) | `CJ_PROTECT_WHITELIST` | Configuration for the allowlist that is preventing clickjack attacks.\n[Web Sockets origins allowlist](#web-sockets) | `WS_ALLOWED_ORIGINS` | An allowlist configuration that is used for verifying the `Origin` header of the initial upgrade request when establishing a web socket connection.\nJWT Token refresh | `JWT_REFRESH` | The time in minutes before a JWT token expires and the application router should trigger a token refresh routine.\nIncoming connection timeout | `INCOMING_CONNECTION_TIMEOUT` | Maximum time in milliseconds for a client connection. After that time the connection is closed. If set to 0, the timeout is disabled. Default: 120000 (2 min)\nTenant host pattern | `TENANT_HOST_PATTERN` | String containing a regular expression with a capturing group. The request host is matched against this regular expression. The value of the first capturing group is used as tenant id.\nDestination host pattern | `DESTINATION_HOST_PATTERN` | String containing a regular expression with a capturing group. The request host is matched against this regular expression. The value of the capturing group is used as destination name.\n[Compression](#compression-property) | `COMPRESSION` | Configuration regarding compressing resources before responding to the client.\n_Secure_ flag of session cookie | `SECURE_SESSION_COOKIE` | Can be set to `true` or `false`. By default, the _Secure_ flag of the session cookie is set depending on the environment the application router runs in. For example, when application router is behind a router (Cloud Foundry's router or SAP Web Dispatcher) that is configured to serve HTTPS traffic, then this flag will be present. During local development the flag is not set. This environment variable can be used to enforce setting or omitting the _Secure_ flag. **Note**: If the Secure flag is enforced, the application router will reject requests sent over unencrypted connection (http).\nTrusted CA certificates | `XS_CACERT_PATH` | List of files paths with trusted CA certificates used for outbound https connections (UAA, destinations, etc.). File paths are separated by [path.delimiter](https://nodejs.org/api/path.html#path_path_delimiter). If this is omitted, several well known \"root\" CAs (like VeriSign) will be used. This variable is set automatically by XSA On-premise runtime.\nReject untrusted certificates | `NODE_TLS_REJECT_UNAUTHORIZED` | By default an outbound https connection is terminated if the remote end does not provide a trusted certificate. This check can be disabled by setting `NODE_TLS_REJECT_UNAUTHORIZED` to `0`. This is a built-in feature of Node.js. **Note:** Do not use this in production as it compromises security!\nExternal reverse proxy flag | `EXTERNAL_REVERSE_PROXY` | Boolean value that indicates the use of application router behind an external reverse proxy (outside of Cloud Foundry domain)\nSkip client credentials tokens load on start | `SKIP_CLIENT_CREDENTIALS_TOKENS_LOAD` | Boolean value that indicates that no client credentials tokens should be created during the application router start phase \n[Cross-Origin Resource Sharing](#cross-origin-resource-sharing-configuration) | `CORS` | Configuration regarding CORS enablement.\nPreserve URL fragment | `PRESERVE_FRAGMENT` | When set to `true` or not set, fragment part of the URL provided during first request of not logged-in user to protected route will be preserved, and after login flow user is redirected to original URL including fragment part. However, this may break programmatic access to Approuter (e.g. e2e tests), since it introduces change in login flow, which is incompatible with Approuter version 4.0.1 and earlier. Setting value to `false` makes login flow backward compatible, however will not take fragment part of the URL into account.\n[Direct Routing URI Patterns](#direct-routing-uri-patterns-configuration) | `DIRECT_ROUTING_URI_PATTERNS` | Configuration for direct routing URI patterns. \n[NodeJS Minimal Logging Level](#nodejs-minimal-logging-level-configuration) | `CF_NODEJS_LOGGING_LEVEL` | Configuration for NodeJS minimal logging level. \nBackend Cookies Secret | `BACKEND_COOKIES_SECRET` | Secret that is used to encrypt backend session cookies in service to Application Router flow. Should be set in case multiple instances of Application Router are used. By default a random sequence of characters is used.\nService to Application Router | `SERVICE_2_APPROUTER` | If `true`, when the SAP Passport header is received from the application router, it will be transferred without modification to the backend application.\nClient certificate header name | `CLIENT_CERTIFICATE_HEADER_NAME` | When set application router will use this header name to get the client certificate from the request header in subscription callback. If not provided the default header name `x-forwarded-client-cert` is used.\nServer Keep Alive | `SERVER_KEEP_ALIVE` | server keep alive timeout (positive integer in milliseconds).\nMinimum Token Validity | `MINIMUM_TOKEN_VALIDITY` | positive integer in seconds. When set, approuter will check that the token returned from the authorization service has an expiration time higher than the minimum token validity value.\n\n\n**Note:** all those environment variables are optional.\n\n\n### Destinations\n\nThe destinations configuration can be provided by the `destinations` environment variable or by destination  service. There has to be a destination for every single app (microservice) that is a part of the business application.\n\n#### Environment destinations\n\nThe destinations configuration is an array of objects. Here are the properties that a destination can have:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nname | String | | A unique alphanumeric identifier of the destination.\nurl | String | | URL of the app (microservice).\nproxyHost | String | x | The host of the proxy server used in case the request should go through a proxy to reach the destination.\nproxyPort | String | x | The port of the proxy server used in case the request should go through a proxy to reach the destination.\nforwardAuthToken | Boolean | x | If `true`, the OAuth token is sent to the destination. The default value is `false`. This token contains user identity, scopes and other attributes. It is signed by the UAA or IAS service, so it can be used for user authentication and authorization with backend services.\nstrictSSL | Boolean | x | Configures whether the application router should reject untrusted certificates. The default value is `true`.<br />**Note:** Do not use this in production as it compromises security!\ntimeout | Number | x | Positive integer representing the maximum wait time for a response (in milliseconds) from the destination. Default is 30000ms.\nsetXForwardedHeaders | Boolean | x | If `true` , the application router adds X-Forwarded-(Host, Path, Proto) headers to the backend request.Default value is true.\nproxyType | String | x | Configures whether the destination is used to access applications in on-premise networks or on public Internet. Possible value: `OnPremise`. if the property is not provided, it is assumed that it is a public Internet access. <br />**Note:** if `OnPremise` value is set,  binding to SAP Cloud Platform connectivity service is required, and `forwardAuthToken` property should not be set.\n\n\n**Note:** The timeout specified will also apply to the [destination's logout path](#destinations-property) or  [service's logout path](#services-property) (if you have set one). <br />\n**Note:** `proxyHost` and `proxyPort` are optional, but if one of them is defined, then the other one becomes mandatory.\n\nSample content of the destinations environment variable:\n\n```json\n[\n  {\n    \"name\" : \"ui5\",\n    \"url\" : \"https://ui5.sap.com\",\n    \"proxyHost\" : \"proxy\",\n    \"proxyPort\" : \"8080\",\n    \"forwardAuthToken\" : false,\n    \"timeout\" : 1200\n  }\n]\n```\n\nIt is also possible to include the destinations in the *manifest.yml* and *manifest-op.yml* files:\n\n```yml\n- name: node-hello-world\n  memory: 100M\n  path: web\n  env:\n    destinations: >\n                  [\n                    {\"name\":\"ui5\", \"url\":\"https://ui5.sap.com\"}\n                  ]\n```\n\n#### Destination service\n\nDestination configuration can also be read from `destination service` .<br>\nHere are the Approuter limitations to destination properties configuration from destination service :\n\nProperty  | Additional Property | Description\n-------- |:--------:| -----------\nType | |only `HTTP` supported.\nAuthentication |  | All authentication types are supported. <br>**Note:** `User` and `Password` are mandatory if the authentication type is `basic authentication`.<br>**Note:** if the authentication type set to `principal propagation` the ProxyType have to be `on-premise`.<br>**Note:** if the authentication type set to `OAuth2SAMLBearerAssertion`, `uaa.user` scope in xs-security.json is required.\nProxyType |   | Supported proxy type : `on-premise`, `internet`, `private-link`.<br> **Note:** if ProxyType set to `on-premise`, binding to SAP Cloud Platform connectivity service is required.<br> **Note:** The `private-link` proxy type is a beta feature and is not meant for productive use. It is only available in Azure landscapes.\n\n\n##### Optional additional properties:\n\nProperty  | Additional Property | Description\n-------- |:--------:| -----------\nHTML5.ForwardAuthToken | x | If `true` the OAuth token will be sent to the destination. The default value is `false`. This token contains user identity, scopes and other attributes. It is signed by the UAA so it can be used for user authentication and authorization with backend services.<br> **Note:** if ProxyType set to `on-premise`, ForwardAuthToken property should not be set.<br> **Note:** if Authentication type is other than NoAuthentication, ForwardAuthToken property should not be set.\nHTML5.Timeout |  x | Positive integer representing the maximum wait time for a response (in milliseconds) from the destination. Default is 30000ms.**Note:** The timeout specified will also apply to the [destination's logout path](#destinations-property) or [service's logout path](#services-property) (if you have set one). \nHTML5.PreserveHostHeader | x | If `true` , the application router preserves the host header in the backend request.<br />This is expected by some back-end systems like AS ABAP, which do not process x-forwarded-* headers.\nHTML5.DynamicDestination | x | If `true` , the application router allows to use this destination dynamically on host or path level.\nHTML5.SetXForwardedHeaders | x | If `true` , the application router adds X-Forwarded-(Host, Path, Proto) headers to the backend request.Default value is true.\nsap-client | x | If provided, the application router propagates the sap-client and its value as a header in the backend request.<br />This is expected by ABAP back-end systems.\nURL.headers.`<header-name>` | x | If provided, the application router propagates this special attribute in the destination as the header. The application router can get the headers list from the destination API. Existing request headers are not overwritten.\n\n<br />**Note:** \n* In case destination with the same name is defined both in environment destination and destination service, the destination configuration will load from the environment.\n* Destinations on destination service instance level are supported.\n* Only destination client certificates of type p12 are supported.\n* Only destination trust certificates of the type privacy-enhanced mail (PEM) are supported.\n\n### UAA configuration\n\nThe User Account and Authentication (UAA) server is responsible for user authentication.\nIn Cloud Foundry and XS OnPremise Runtime a service is created for this configuration and by using the standard service binding mechanism\nthe content of this configuration is available in the `VCAP_SERVICES` environment variable.</br>\n**Note:** The service should have `xsuaa` in its tags or the environment variable `UAA_SERVICE_NAME` should be specified (stating the exact name of the UAA service).</br>\nDuring local development the UAA configuration is provided in the *default-services.json* file.\nWhen the UAA is used for authentication the user is redirected to the UAA's login page to enter their credentials.\n\nSample content for a *default-services.json* file:\n\n```json\n{\n    \"uaa\": {\n        \"url\" : \"http://my.uaa.server/\",\n        \"clientid\" : \"client-id\",\n        \"clientsecret\" : \"client-secret\",\n        \"xsappname\" : \"my-business-application\"\n    }\n}\n```\n\nThe application router supports the `$XSAPPNAME` placeholder (upper case letters). You may use it in your [route](#routes) configurations in the scope property.\nThe value of `$XSAPPNAME` is taken from the UAA configuration (the `xsappname` property).\n\n### Additional headers configuration\n\nIf configured, the application router can send additional http headers in its responses to the client.\nAdditional headers can be set in the `httpHeaders` environment variable.\n\nSample configuration for additional headers:\n\n```json\n[\n  {\n    \"X-Frame-Options\": \"ALLOW-FROM http://localhost\"\n  },\n  {\n    \"Test-Additional-Header\": \"1\"\n  }\n]\n```\nIn this case, the application router sends two additional headers in the responses to the client.<br>\nCustom response headers, configured in the application router configuration file (xs-app.json) are added to the list of additional http headers.\nIf the response header name already exists in the additional http headers list, the value of the response header name overrides the value of the http header.  \n\n**Caution:** For security reasons, the following headers must not be configured: authorization', 'cookie', and 'set-cookie'.\n\n### Additional cookies configuration\n\nIf configured, the application router will send additional cookie values in its responses to the client.\nAdditional cookie values can be set in the `COOKIES` environment variable.\n\nExample of configuration for cookies in the manifest.yml :\n\n```json\n  env:\n   COOKIES: >\n        { \"SameSite\":\"None\" }\n```\nIn this example, the application router sets the SameSite cookie attribute to None for the JSESSIONID cookie in the responses to the client.\n\nNote: Currently, only the SameSite cookie value is supported. SameSite = \"Strict\" is not supported.\n\n### Plugins configuration\n\nA plugin serves almost the same purpose as [*routes*](#routes). The difference is that plugins can be configured through the environment and that way you can add new routes to the application router without changing the design-time artefact *xs-app.json*. The plugin configuration properties are the same as those of a [*route*](#routes) except that you can't configure `localDir`, `replace` and `cacheControl`.\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nname | String | | The name of this plugin\nsource | String/Object | | Describes a regular expression that matches the incoming [request URL](https://nodejs.org/api/http.html#http_message_url).</br> **Note:** A request matches a particular route if its path __contains__  the given pattern. To ensure the RegExp matches the complete path, use the following form: ^<path>$`. </br> **Note:** Be aware that the RegExp is applied to on the full URL including query parameters.\ntarget | String | x | Defines how the incoming request path will be rewritten for the corresponding destination.\ndestination | String | | An alphanumeric name of the destination to which the incoming request should be forwarded.\nauthenticationType | String | x | The value can be ias, xsuaa, basic, or none. The default authenticationType depends on the authentication service binding: If the application router is bound to the Identity Authentication service, the default authenticationType is ias. Otherwise, the default value is xsuaa. If xsuaa or ias are used, the specified authentication server (Identity Authentication or User Account and Authentication) handles the authentication (the user is redirected to the login form of Identity Authentication or User Account and Authentication). The basic authenticationType works with SAP S/4HANA users, SAP ID service, and Identity Authentication service. For more information, see the SAP Note 3015211 - BASIC authentication options for SAP BTP Cloud Foundry applications. If the value none is used, no authentication is required for this route.\n</br>.\ncsrfProtection | Boolean | x | Enable [CSRF protection](#csrf-protection) for this route. The default value is `true`.\nscope | Array/String/Object | x | Scopes are related to the permissions a user needs to access a resource. This property holds the required scopes to access the target path. Access is granted if the user has at least one of the listed scopes. **Note:** Scopes are defined as part of the xsuaa service instance configuration. You can use `ias` as authenticationType and xsuaa scopes for authorization if the application router is bound to both (`ias` and `xsuaa`).\"\n\nSample content of the `plugins` environment variable:\n```json\n[\n  {\n    \"name\": \"insecurePlugin\",\n    \"source\": \"/plugin\",\n    \"destination\": \"plugin\",\n    \"target\": \"/\",\n    \"csrfProtection\": false,\n    \"scope\": [\"viewer\", \"reader\"]\n  },\n  {\n    \"name\": \"publicPlugin\",\n    \"source\": \"/public-plugin\",\n    \"destination\": \"publicPlugin\",\n    \"authenticationType\": \"none\"\n  }\n]\n```\n\n### Session timeout configuration\n\nFor example, if you have the following line in your *manifest.yml* or *manifest-op.yml* file:\n\n```yml\n- name: node-hello-world\n  memory: 100M\n  path: web\n  env:\n    SESSION_TIMEOUT: 40\n```\n\nAfter 40 minutes of user inactivity (no requests have been sent to the application router), a Central Logout will be triggered due to session timeout.\n\n**Note:** The application router depends on the UAA server for user authentication, if the `authenticationType` for a route is `xsuaa`. The UAA server may have a different session timeout configured.\nIt is recommended that the configurations of the application router and the UAA are identical.<br />\n\n### X-Frame-Options configuration\n\nApplication router sends `X-Frame-Options` header by default with value `SAMEORIGIN`. This behaviour can be changed in 2 ways:\n\n- Disable sending the default header value by setting `SEND_XFRAMEOPTIONS` environment variable to `false`\n- Override the value to be sent via [additional headers configuration](#additional-headers-configuration)\n\n## Cross-Origin Resource Sharing configuration\n\nThe CORS keyword enables you to provide support for cross-origin requests, for example, by allowing the modification of the request header. Cross-origin resource sharing (CORS) permits Web pages from other domains to make HTTP requests to your application domain, where normally such requests would automatically be refused by the Web browser's security policy.\nCross-origin resource sharing(CORS) is a mechanism that allows restricted resources on a webpage to be requested from another domain (/protocol/port) outside the domain (/protocol/port) from which the first resource was served. \nCORS configuration enables you to define details to control access to your application resource from other Web browsers. For example, you can specify where requests can originate from or what is allowed in the request and response headers. \n\nThe CORS configuration can be provided in the CORS environment variable or in the CORS property of the application router configuration file (xs-app.json).\nIf a cross-origin resource sharing (CORS) configuration exists in both the environment variables and the application router configuration file (xs-app.json), the application router gives priority to the CORS configuration in the application router configuration file.\n\nThe CORS configuration is an array of objects. Here are the properties that a CORS object can have:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nuriPattern| String | | A regular expression representing for which source routes CORS configuration is applicable. To ensure the RegExp matches the complete path, surround it with ^ and $. **Defaults:** none.\nallowedOrigin| Array | | A comma-separated list of objects that each one of them containing host name, port and protocol that are allowed by the server.for example: [{?host?: \"www.sap.com\"}] or [{?host?: ?*.sap.com?}]. **Note:** matching is case-sensitive. In addition, if port or protocol are not specified the default is ?_*_?.  **Defaults:** none.\nallowedMethods| Array of upper-case HTTP methods| x | Comma-separated list of HTTP methods that are allowed by the server. **Defaults:** [?GET?, ?POST?, ?HEAD?, ?OPTIONS?] (all) applies. **Note:** matching is case-sensitive.\nmaxAge| Number| x | A single value specifying how long, in seconds, a preflight response should be cached. A negative value will prevent CORS Filter from adding this response header to pre-flight response.  **Defaults:** 1800. \nallowedHeaders| Array of headers| x | Comma-separated list of request headers that are allowed by the serve. **Defaults:** [?Origin?, ?Accept?, ?X-Requested-With?, ?Content-Type?, ?Access-Control-Request-Method?, ?Access-Control-Request-Headers?].\nexposeHeaders| Array of headers| x | Comma-separated list of response headers (other than simple headers) that can be exposed. **Defaults:** none.\nallowedCredentials| Boolean| x | A flag that indicates whether the resource supports user credentials. **Defaults:** true.\n\nSample content of the CORS environment variable:\n\n```json\n[\n  {\n      \"uriPattern\": \"^\\route1$\",\n      \"allowedMethods\": [\n        \"GET\"\n      ],\n      \"allowedOrigin\": [\n        {\n          \"host\": \"my_example.my_domain\",\n          \"protocol\": \"https\",\n          \"port\": 345\n        }\n      ],\n      \"maxAge\": 3600,\n      \"allowedHeaders\": [\n        \"Authorization\",\n        \"Content-Type\"\n      ],\n      \"exposeHeaders\": [\n        \"customHeader1\",\n        \"customHeader2\"\n      ],\n      \"allowedCredentials\": true\n    }\n]\n```\n\nIt is also possible to include the CORS in the *manifest.yml* and *manifest-op.yml* files:\n\n```yml\n- name: node-hello-world\n  memory: 100M\n  path: web\n  env:\n    CORS: >\n      [\n        {\n          \"allowedOrigin\":[\n                            {\n                                \"host\":\"my_host\",\n                                \"protocol\":\"https\"\n                            }\n                          ],\n          \"uriPattern\":\"^/route1$\"\n        }\n      ]\n```\nFor route with source that match the REGEX ?^\\route1$?, the CORS configuration is enabled.\n\n## Direct Routing URI Patterns configuration\n\nWith the direct routing URI patterns configuration, you can define a list of URIs that are directed to the routing configuration file (xs-app.json file) of the application router instead of to a specific application's xs-app.json file that is stored in the HTML5 Application Repository. This configuration improves the application loading time and monitoring options because it prevents unnecessary calls to the HTML5 Application Repository.\n\nThe configuration is an array of strings or regular expressions. \nNote that the following regular expressions are preconfigured in the configuration array: \"^favicon.ico$\", \"^login$\".\nTherefore, do not name your HTML5 applications \"favicon.ico\" or \"login\"!\n\nYou have to provide only the first segment in the URL, after the approuter host. For example, for the URL https://approuter-host/route1/index.html, you enter \"route1\" in the direct routing URI patterns array.\n\nSample content of the Direct Routing URI Patterns environment variable:\n\n```json\n  env:\n    DIRECT_ROUTING_URI_PATTERNS: >\n      [\"route1\", \"^route2$\", \"route3\"]\n```\n\n## NodeJS Minimal Logging Level configuration\n\nWith this configuration, you can set the minimal logging level of the *cf-nodejs-logging-support* library of the application router. The following levels are available:\n\n* *off*\n\n* *error*\n\n* *warn*\n\n* *info*\n\n* *verbose*\n\n* *debug*\n\n* *silly*\n\nThe default value is \"error\".\n\nHere is a sample content for the NodeJS minimal logging level environment variable:\n\n```json\n  env:\n    CF_NODEJS_LOGGING_LEVEL: \"debug\"\n```\n\n**Note** The application router also uses the *@sap/logging* library. To configure the log level for this library, you use the *XS_APP_LOG_LEVEL* environment variable.\n\n## Routes\n\nA route is a configuration that instructs the application router how to process an incoming request with a specific path.\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nsource | String/Object | | Describes a regular expression that matches the incoming [request URL](https://nodejs.org/api/http.html#http_message_url).</br> **Note:** A request matches a particular route if its path __contains__  the given pattern. To ensure the RegExp matches the complete path, use the following form: ^<path>$`. </br> **Note:** Be aware that the RegExp is applied to on the full URL including query parameters.\nhttpMethods | Array of upper-case HTTP methods | x | Which HTTP methods will be served by this route; the methods supported are: `DELETE`, `GET`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE`, `PATCH` (no extension methods are supported). If this option is not specified, the route will serve any HTTP method.\ntarget | String | x | Defines how the incoming request path will be rewritten for the corresponding destination or static resource.\ndestination | String | x | The name of the destination to which the incoming request should be forwarded.  The destination name can be a static string or a regular expression that defines how to dynamically fetch the destination name from the source property or from the host.\nservice | String | x | The name of the service to which the incoming request should be forwarded.\nendpoint | String | x | The name of the endpoint within the service to which the incoming request should be forwarded. Can only be used in a route containing a service attribute.\nlocalDir | String | x | Folder in the [working directory](#working-directory) from which the application router will serve static content **Note:** localDir routes support only HEAD and GET requests; requests with any other method receive a 405 Method Not Allowed.\npreferLocal | Boolean | x | Defines from which subaccount the destination is retrieved. If preferLocal is true, the destination is retrieved from the provider subaccount. If preferLocal is false or undefined, the destination is retrieved from the subscriber subaccount.\nreplace | Object | x | An object that contains the configuration for replacing placeholders with values from the environment. *It is only relevant for static resources*. Its structure is described in [Replacements](#replacements).\nauthenticationType | String | x | The value can be `xsuaa`,`ias`, `basic` or `none`. The default one is `ias`, if subaccount trusts an ias tenant, else `xsuaa`. When `xsuaa` or `ias` are used the specified authentication server will handle the authentication (the user is redirected to the authentication service login form). The `basic` mechanism works with SAP HANA users, SAP ID Service and SAP Identity Authentication service. Find more details in SAP Note 3015211 - BASIC authentication options for SAP BTP Cloud Foundry applications. If `none` is used then no authentication is needed for this route.\ncsrfProtection | Boolean | x | Enable [CSRF protection](#csrf-protection) for this route. The default value is `true`.\nscope | Array/String/Object | x | Scopes are related to the permissions a user needs to access a resource. This property holds the required scopes to access the target path.\ncacheControl | String | x | String representing the value of the `Cache-Control` header, which is set on the response when serving static resources. By default the `Cache-Control` header is not set. *It is only relevant for static resources.*\nidentityProvider | String | x | The name of the identity provider to use if provided in route’s definition. If not provided, the route will be authenticated with the default identity provider. **Note:** If the authenticationType is set to Basic Authentication or None, do not define the identityProvider property.\n\n\n**Note:** The properties `destination`, `localDir` and `service` are optional, but exactly one of them must be defined. <br />\n**Note:** When using the property `replace` it is mandatory to define the `localDir` property. <br />\n**Note:** The cacheControl property is effective only when one of the following settings is performed:\n*\tThe localDir property was set\n*\tA service pointing to HTML5 Application Repository (\"service\": \"html5-apps-repo-rt\") was set\n \n### Example routes\n\nFor example, if you have a configuration with the following destination:\n\n```json\n[\n  {\n    \"name\" : \"app-1\",\n    \"url\" : \"http://localhost:3001\"\n  }\n]\n```\n\nHere are some sample route configurations:\n\n* Route with a `destination` and no `target`\n\n```json\n{\n    \"source\": \"^/app1/(.*)$\",\n    \"destination\": \"app-1\"\n}\n```\n\nSince there is no `target` property for that route, no path rewriting will take place.\nIf we receive */app1/a/b* as a path, then a request to *http://localhost:3001/app1/a/b* is sent.\nThe source path is appended to the destination URL.\n\n* Route with case-insensitive matching\n\n```json\n{\n    \"source\": {\n      \"path\": \"^/app1/(.*)$\",\n      \"matchCase\": false\n    },\n    \"destination\": \"app-1\"\n}\n```\n\nThis example is much like the previous one,\nbut instead of accepting only paths starting with */app1/*, we accept any variation of _app1_'s case. </br>\nThat means if we receive */ApP1/a/B*, then a request to *http://localhost:3001/ApP1/a/B* is sent. </br>\n**Note:** The property `matchCase` has to be of type boolean. It is optional and has a default value `true`.\n\n* Route with a `destination` and a `target`\n\n```json\n{\n    \"source\": \"^/app1/(.*)$\",\n    \"target\": \"/before/$1/after\",\n    \"destination\": \"app-1\"\n}\n```\n* Route with a `service`, a `target` and an `endpoint`\n\n```json\n{\n     \"source\": \"^/odata/v2/(.*)$\",\n     \"target\": \"$1\",\n     \"service\": \"com.sap.appbasic.country\",\n     \"endpoint\": \"countryservice\"\n}\n```\n\nWhen a request with path */app1/a/b* is received, the path rewriting is done according to the rules in the `target` property.\nThe request will be forwarded to http://localhost:3001/before/a/b/after.\n\n**Note:** In regular expressions there is the term _capturing group_. If a part of a regular expression is surrounded with parenthesis, then what has been matched can be accessed using _$_ + the number of the group (starting from 1).\nIn the last example _$1_ is mapped to the _(.*)_ part of the regular expression in the `source` property.\n\n* Route with dynamic `destination` and `target`\n\n```json\n{\n      \"source\": \"^/destination/([^/]+)/(.*)$\",\n      \"target\": \"$2\",\n      \"destination\": \"$1\",\n      \"authenticationType\": \"xsuaa\"\n    }\n```\nIf you have a another destination configured:\n```json\n[\n\t{\n\t\"name\" : \"myDestination\",\n\t\"url\" : \"http://localhost:3002\"\n\t}\n]\n```\nwhen a request with the path /destination/myDestination/myTarget is received, the destination will be replaced with the url from \"myDestination\", the target will get \"myTarget\" and the request will be redirected to http://localhost:3002/myTarget\n\n**Note:** You can use a dynamic value (regex) or a static string for both destination and target values\n\n**Note:** The approuter first looks for the destination name in the mainfest.yaml file, and if not found, looks for it in the destination service.\n\n* Destination In Host\n\nFor legacy applications that do not support relative URL paths, you need to define your URL in the following way to enable the destination to be extracted from the host\nthe url should be defined in the following way:\n\n```https://<tenant>-<destination>.<customdomain>/<pathtofile>```\n\nTo enable the application router to determine the destination of the URL host, a DESTINATION_HOST_PATTERN attribute must be provided as an environment variable.\n\nExample:\nWhen a request with the path https://myDestination.some-approuter.someDomain.com/app1/myTarget is received, the following route is used:\n```json\n {\n      \"source\": \"^/app1/([^/]+)/\",\n      \"target\": \"$1\",\n      \"destination\": \"*\",\n      \"authenticationType\": \"xsuaa\"\n }\n```\n \n In this example, the target will be extracted from the source and the ‘$1’ value is replaced with ‘myTarget’. The destination value is extracted from the host and the ‘*’ value is replaced with ‘myDestination’.\n\n* Route with a `localDir` and no `target`\n\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"localDir\": \"my-static-resources\"\n}\n```\n\nSince there is no `target` property for that route, no path rewriting will take place.\nIf we receive a request with a path */web-pages/welcome-page.html*, the local file at *my-static-resources/web-pages/welcome-page.html*\nunder the working directory will be served.\n\n* Route with a `localDir` and a `target`\n\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"target\": \"$1\",\n    \"localDir\": \"my-static-resources\"\n}\n```\nIf we receive a request with a path '/web-pages/welcome-page.html', the local file at 'my-static-resources/welcome-page.html'\nunder the working directory will be served.</br> **Note:** The capturing group used in the `target` property.\n\n* Route with `localDir` and `cacheControl`\n\n```json\n{\n  \"source\": \"^/web-pages/\",\n  \"localDir\": \"my-static-resources\",\n  \"cacheControl\": \"public, max-age=1000,must-revalidate\"\n}\n```\n\n* Route with `service` \"html5-apps-repo-rt\" and `cacheControl`\n\n```json\n{\n  \"source\": \"^/index.html$\",\n  \"service\": \"html5-apps-repo-rt\",\n  \"authenticationType\": \"xsuaa\",\n  \"cacheControl\":\"public,max-age=1000,must-revalidate\"\n}\n```\n\n* Route with `httpMethods` restrictions\n\nThe `httpMethods` option allows you to split the same path across different targets depending on the HTTP method. For example:\n\n```json\n{\n  \"source\": \"^/app1/(.*)$\",\n  \"target\": \"/before/$1/after\",\n  \"httpMethods\": [\"GET\", \"POST\"]\n}\n```\n\nThis route will be able to serve only GET and POST requests. Any other method (including extension ones) will get a 405 Method Not Allowed response. The same endpoint can be split across multiple *destinations* depending on the HTTP method of the requests:\n\n```json\n{\n  \"source\": \"^/app1/(.*)$\",\n  \"destination\" : \"dest-1\",\n  \"httpMethods\": [\"GET\"]\n},\n{\n  \"source\": \"^/app1/(.*)$\",\n  \"destination\" : \"dest-2\",\n  \"httpMethods\": [\"DELETE\", \"POST\", \"PUT\"]\n}\n```\n\nThe setup above will route GET requests to the target *dest-1*, DELETE, POST and PUT to *dest-2*, and any other method receives a 405. It is also possible to specify \"catchAll\" routes, namely those that do not specify `httpMethods` restrictions:\n\n```json\n{\n  \"source\": \"^/app1/(.*)$\",\n  \"destination\" : \"dest-1\",\n  \"httpMethods\": [\"GET\"]\n},\n{\n  \"source\": \"^/app1/(.*)$\",\n  \"destination\" : \"dest-2\"\n}\n```\n\nIn the setup above, GET requests will be routed to *dest-1*, and all the rest to *dest-2*.\n\nWhy using `httpMethods`? It is often useful to split the implementation of microservices across multiple, highly specialized applications. For example, a Java application written to serve high amounts of GET requests that return large payloads is implemented, sized, scaled and load-tested differently than applications that offer APIs to upload limited amounts of data. `httpMethods` allows you to split your REST APIs, e.g., */Things* to different applications depending on the HTTP methods of the requests, without having to make the difference visible in the URL of the endpoints.\n\nAnother usecase for `httpMethods` is to \"disable\" parts of the REST API. For example, it may be necessary to disable some endpoints that accept DELETE for external usage. By allowing only certain methods in the route, you can hide functionalities of your microservice that should not be consumable without having to modify the code or configurations of your service.\n\n**Note:** `localDir` and `httpMethods` are incompatible. The following route is invalid:\n\n```json\n{\n  \"source\": \"^/app1/(.*)$\",\n  \"target\": \"/before/$1/after\",\n  \"localDir\": \"resources\",\n  \"httpMethods\": [\"GET\", \"POST\"]\n}\n```\n\nHowever, since `localDir` supports only GET and HEAD requests, returning 405 to requests with any other method, any `localDir` route is \"implicitly\" restricted in terms of supported HTTP methods.\n\n* Route with a `scope`\n\nAn application specific scope has the following format:\n\n```\n<application-name>.<scope-name>\n```\n\nIt is possible to configure what scope the user needs to possess in order to access a specific resource. Those configurations are per [route](#routes).\n\nIn this example, the user should have **at least** one of the scopes in order to access the corresponding resource.\n\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"target\": \"$1\",\n    \"scope\": [\"$XSAPPNAME.viewer\", \"$XSAPPNAME.reader\", \"$XSAPPNAME.writer\"]\n}\n```\n\nFor convenience if our route requires only one scope the `scope` property can be a string instead of an array. The following configuration is valid as well:\n\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"target\": \"$1\",\n    \"scope\": \"$XSAPPNAME.viewer\"\n}\n```\n\nYou can configure scopes for the different HTTP methods (GET, POST, PUT, HEAD, DELETE, CONNECT, TRACE, PATCH and OPTIONS). If some of the HTTP methods are not explicitly set, the behaviour for them is defined by the `default` property. In case there is no `default` property specified and the HTTP method is also not specified, the request is rejected by default.\n\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"target\": \"$1\",\n    \"scope\": {\n      \"GET\": \"$XSAPPNAME.viewer\",\n      \"POST\": [\"$XSAPPNAME.reader\", \"$XSAPPNAME.writer\"],\n      \"default\": \"$XSAPPNAME.guest\"\n    }\n}\n```\n\nThe application router supports the `$XSAPPNAME` placeholder. Its value is taken (and then substituted in the routes) from the UAA configuration.\nYou may read more about it [here](#uaa-configuration). </br>**Note:** The substitution is case sensitive.\n\nYou can use the name of the business application directly instead of using the `$XSAPPNAME` placeholder:\n\n```json\n{\n    \"source\": \"^/backend/(.*)$\",\n    \"scope\": \"my-business-application.viewer\"\n}\n```\n\n* Examples for Routes With `identityProvider`\n\nFor example, we can define several identity providers for different types of users. In this example, there are 2 categories: hospital patients and hospital personnel: \n1. patientsIDP – use for authenticating patients.\n2. hospitalIDP – use for authenticating all hospital personnel (doctors, nurses etc..).\n    \nWe can configure 2 routes with the following identityProvider properties:\n\n```json\n[\n    { \n\t\"source\": \"^/patients/sap/opu/odata/(.*)\",\n\t\"target\": \"/sap/opu/odata$1\",\n\t\"destination\": \"backend\",\n\t\"authenticationType\": \"xsuaa\",\n\t\"identityProvider\": \"patientsIDP\"\n    },\n    {\n        \"source\": \"^/hospital/sap/opu/odata/(.*)\",\n\t\"target\": \"/sap/opu/odata$1\",\n\t\"destination\": \"backend\", \"authenticationType\": \"xsuaa\",\n\t\"identityProvider\": \"hospitalIDP\"\n    }\n]\n```\nSo, a patient who tries to log into the system will be authenticated by patientIDP, and a doctor who tries to log in will be authenticated by hospitalIDP.\n\n**Note:** After logging in using one of the identity providers, to switch to the other one it is necessary to logout and perform a new log in.\n\n**Note:** Currently, dynamic provisioning of the subscriber account identity provider is not supported.\n\n**Note:** Identity provider configuration is only supported in the client side login redirect flow.\n\n\n## Replacements\n\nThis object configures the placeholder replacement in static text resources.\n\nProperty | Type | Description\n-------- | ---- | -----------\npathSuffixes | Array | An array containing the path suffixes that are relative to `localDir`. Only files with a path ending with any of these suffixes will be processed.\nvars | Array | A list with the environment variables that will be replaced in the files matching the suffix.\nservices | Object | An object describing bound services that will provide replacement values. Each property of this object is used to lookup a separate service. The property names are arbitrary. Service lookup format is described in _Service Query_ section in _@sap/xsenv_ documentation.\n\nThe supported tags for replacing environment variables are: `{{ENV_VAR}}` and `{{{ENV_VAR}}}`.\nIf there is such an environment variable it will be replaced, otherwise it will be just an empty string.\n\nFor services you can specify a property from the `credentials` section of the service binding which will be replaced.\nFor example `{{{my_service.property}}}` and `{{my_service.property}}`\n\nEvery variable that is replaced using two-brackets syntax will be HTML-escaped.\n\nFor example if the value of the environment variable is `ab\"cd` the result will be `ab&amp;quot;cd`.</br>\nThe triple brackets syntax is used when the replaced values don't need to be escaped and all values will be unchanged.\n\nFor example, if somewhere in your *xs-app.json* you have a route:\n\n```json\n{\n  \"source\": \"^/get/home(.*)\",\n  \"target\": \"$1\",\n  \"localDir\": \"resources\",\n  \"replace\": {\n    \"pathSuffixes\": [\"index.html\"],\n    \"vars\": [\"escaped_text\", \"NOT_ESCAPED\"],\n    \"services\": {\n      \"my-sapui5-service\": {\n        \"tag\": \"ui5\"\n      }\n    }\n  }\n}\n```\n\nand you have the following `index.html`:\n\n```html\n<html>\n  <head>\n    <title>{{escaped_text}}</title>\n    <script src=\"{{{NOT_ESCAPED}}}/index.js\"/>\n    <script src=\"{{{my-sapui5-service.url}}}\"/>\n  </head>\n</html>\n```\nthen in `index.html`, `{{escaped_text}}` and `{{{NOT_ESCAPED}}}` will be replaced with the values of the environment variables `escaped_text` and `NOT_ESCAPED`.\n\nIf you have a service in VCAP_SERVICES like:\n\n```json\n{\n  \"sapui5_service\": [{\n    \"name\": \"sapui5\",\n    \"tags\": [\"ui5\"],\n    \"credentials\": {\n      \"url\": \"http://sapui5url\"\n    }\n  }]\n}\n```\nthen `{{{my-sapui5-service.url}}}` will be replaced with the `url` property from `sapui5` service - in this case `http://sapui5url`.\n\n**Note:** _All_ index.html files will be processed.\nIf you want to replace only specific files, you have to set the path of the file relative to `localDir`.\n\n**Note:** All files should be **UTF-8** encoded.\n\n**Note:** If a service is not found an error is thrown on startup.\n\n**Note:** If a service and an environment variable from `vars` have the same name, an error is thrown on startup.\n\nThe returned content type is based on the file extension. Currently the supported file extensions are:\n* .json - application/json\n* .txt - text/plain\n* .html - text/html\n* .js - application/javascript\n* .css - test/css\n\nIf the file extension is different, the default content type is `text/html`.\n\nExample for `pathSuffixes`:\n```json\n{\n  \"pathSuffixes\": [\".html\"]\n}\n```\nThe suffix `.html` means that all files with the extension *.html* under `localDir` and it's subfolders will be processed.\n```json\n{\n  \"pathSuffixes\": [\"/abc/main.html\", \"some.html\"]\n}\n```\nThe suffix `/abc/main.html` means that all files named *main.html* which are inside a folder named *abc* will be processed.\n\nThe suffix `some.html` means that all files which have a name that ends with *some.html* will be processed. For example: `some.html`, `awesome.html`.\n\n```json\n{\n  \"pathSuffixes\": [\"/some.html\"]\n}\n```\n\nThe suffix `/some.html` means that all files which have the **exact** name *some.html* will be processed. For example: `some.html`, `/abc/some.html`.\n\n**Note:** URL path parameters are not supported for replacements.\nFor example, replacements will not work if the path looks like '/test;color=red/index.html'. For more information regarding path parameters refer to [http://tools.ietf.org/html/rfc3986#section-3.3](http://tools.ietf.org/html/rfc3986#section-3.3).\n\n## *xs-app.json* configuration file\n\nThis is the main configuration file of the application router.\nIt contains a JSON object with the following properties:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\n[welcomeFile](#welcomefile-property) | String | x | The client is redirected to this page by default, if the request does not have a path. For more information, see [welcomeFile](#welcomefile-property).\n[authenticationMethod](#authenticationmethod-property) | String | x | If set to `none` the UAA login roundtrip is disabled. If the property is not set and authentication is defined per [route](#routes), the value is set to `route` by default.\nsessionTimeout | Number | x | Used to set session timeout. The default is 15 minutes. If the [SESSION_TIMEOUT](#session-timeout) environment variable is set this property will be overwritten.\n[routes](#routes-property) | Array | x | Contains all route configurations. The position of a configuration in this array is of significance for the application router in case a path matches more than one *source*. The first route whose *source* matches the path of the incoming request gets activated.\n[login](#login-property) | Object | x | Contains the configuration for the endpoint of the application router which will be used by the UAA during the OAuth2 authentication routine. By default this endpoint is `/login/callback`.\n[logout](#logout-property) | Object | x | Provides options for a [Central Logout](#central-logout) endpoint and a page to which the client to be redirected by the UAA after logout.\n[destinations](#destinations-property) | Object | x | Additional options for your destinations (besides the ones in the `destinations` environment variable).\n[services](#services-property) | Object | x | Additional options for your business services.\n[responseHeaders](#responseHeaders-property) | Array | x | Contains the optional response headers configuration.\n[compression](#compression-property) | Object | x | Configuration regarding compressing resources before responding to the client. If the [COMPRESSION](#compression-property) environment variable is set it will overwrite existing values.\n[pluginMetadataEndpoint](#pluginmetadataendpoint-property) | String | x | Adds an endpoint that will serve a JSON representing all configured plugins.\n[whitelistService](#whitelistservice-property) | Object | x | Options for the allowlist service preventing clickjack attacks.\n[websockets](#websockets-property) | Object | x | Options for the [web socket communication](#web-sockets).\n[errorPage](#errorpage-property) | Array | x | Optional configuration to set-up a custom error pages whenever the approuter encouters an error.\n[cors](#cors-property) | Array | x | Contains the configuration for cross-origin resource sharing.\n\n### *welcomeFile* property\n\nApprouter will redirect to this URL when `/`(root path) is requested.\nThis could be a file located inside the static resources folder or a resource hosted at a different location.\n\n**Note:** Approuter will serve the content of the resource instead of returning a redirect if the request contains a `x-csrf-token: fetch` header.\nSee [CSRF Protection](#csrf-protection).\n\n\nExample:\n```json\n\"welcomeFile\": \"/web-pages/hello-world.html\"\n```\n\n`web-pages` has to be a part of a local resource or an external destination\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"localDir\": \"my-static-resources\"\n}\n```\nor\n```json\n{\n    \"source\": \"^/web-pages/(.*)$\",\n    \"target\": \"$1\",\n    \"destination\": \"mydest\"\n}\n```\n\n\nNote: If there isn't a route with a localDir property, the folloing default is added to the list of routes:\n\n```json\n{\n  \"source\": \"^/(.*)$\",\n  \"localDir\": \"resources\"\n}\n```\n\n\n### *authenticationMethod* property\n\nIt may have the following values:\n\n* `none` - disables authentication for all routes\n* `route` - authentication type is defined in the [route](#routes) configurations\n\nThe default value is `route`.\n\n### *routes* property\n\nIt holds an array of route configuration objects. The order of the configurations is important for the application router.\nThe first route whose `source` pattern gets matched with the path of the incoming request will be activated.\nSee [Routes](#routes) for more info.\n\n### *login* property\n\nA redirect to the application router at a specific endpoint takes place during OAuth2 authentication with UAA.\nThis endpoint can be configured in order to avoid possible collisions. For example:\n\n```json\n\"login\": {\n  \"callbackEndpoint\": \"/custom/login/callback\"\n}\n```\n\nThe default endpoint is `/login/callback`.\n\n### *logout* property\n\nIn this object you can define your business application's central logout endpoint through the `logoutEndpoint` property.\nThe value of logout property should be an object with the following properties:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nlogoutPath | String |  | The path to be used when logging out from application router.\nlogoutPage | String | x | The logout page url path.\nlogoutMethod | String | x | Could be POST or GET. The default value is GET.\ncsrfProtection | Boolean | x | Can only be defined if logoutMethod is POST. If logoutMethod is POST and this property is not defined, default is true. It can be set to false – for example if csrfProtection is implemented in backend application.\n\nFor example, if somewhere in your *xs-app.json* you have:\n\n```json\n\"logout\": {\n  \"logoutEndpoint\": \"/my/logout\"\n}\n```\n\nThis will open an endpoint on application router which, when requested, will trigger the [central logout](#central-logout) routine.\nChanging the browser location from the client-side JavaScript code:\n\n```javascript\nwindow.location.replace('/my/logout');\n```\n\nwill trigger client initiated central Logout.\n\nIn addition, a page to which the user will be redirected by the UAA after logout can be configured using the `logoutPage` property.\nIt may hold:\n\n- URL path - the UAA will redirect the user back to the application router and the path will be interpreted according the configured [routes](#routes).\n\nThe `logoutEndpoint` can be called with query parameters. For example:\n```javascript\nwindow.location.replace('/my/logout?siteId=3');\n```\nThese parameters will be appended as is to the redirect url set by the `logoutPage` property.\nFor example, if the logout section is the following:\n```\n\"logout\": {\n    \"logoutEndpoint\": \"/logout\",\n    \"logoutPage\": \"/logoff.html\"\n  },\n```\nThe redirect url will end with:\n```\n/logoff.html?siteId=3\n```\n\n**Note**: The resource that matches the path should not require authentication. The property `authenticationType` should be set to `none` for that particular route.\n\nExample:\n\n```json\n{\n  \"authenticationMethod\": \"route\",\n  \"logout\": {\n    \"logoutEndpoint\": \"/my/logout\",\n    \"logoutPage\": \"/logout-page.html\"\n  },\n  \"routes\": [\n    {\n      \"source\": \"^/logout-page.html$\",\n      \"localDir\": \"my-static-resources\",\n      \"authenticationType\": \"none\"\n    }\n  ]\n}\n```\n\nIn this case *my-static-resources* (contains *logout-page.html*) is a folder with static resources in the working directory of the application router.\n\n**Note**: Be sure that your main route in your xs-app.json resource that matches the path is not cached by browser. Therefore, the best practice here would be to model cacheControl accordingly:\n\n```json\n{\n  \"routes\": [\n    {\n      \"source\": \"^/ui/index.html\",\n      \"target\": \"index.html\",\n      \"localDir\": \"web\",\n      \"cacheControl\": \"no-cache, no-store, must-revalidate\"\n    }\n  ]\n}\n```\n\n- Absolute http(s) URL - the UAA will redirect the user to a page (or application) different from the application router. \nFor example:\n\n```json\n\"logout\": {\n  \"logoutEndpoint\": \"/my/logout\",\n  \"logoutPage\": \"http://employees.portal\"\n}\n```\n\n**Note**: UAA will execute redirect only in case redirect URL is a valid redirect-uri in xs-security.json - redirect-uris are maintained as part of the oauth2-configuration section in the UAA application security descriptor JSON file given at the creation of the service instance. For example:\n\nUAA application security descriptor:\n```\n\"oauth2-configuration\": {    \n    \"redirect-uris\":\n    [\n     \"http://employees.portal\"\n    ]    \n}\n```\n\nUsing POST method for Logout\n\nFor security reasons it is recommended to model the logout flow using \"POST\" method and enable CSRF protection. \n\nIn that case, logoutMethod and csrfProtection parameters should be added in logout property:\n```json\n  \"logout\": {\n    \"logoutEndpoint\": \"/my/logout\",\n    \"logoutPage\": \"/logout-page.html\",\n    \"logoutMethod\": \"POST\",\n    \"csrfProtection\": true\n}\n```\n**Note**: For backward compatibility reasons logoutMethod default value is GET. \nThe csrfProtection property can only be set if logoutMethod is POST. \nIf logoutMethod is POST and csrfProtection property is not set, csrfProtection will be enabled by default.\n\nConsumption example:\nThe POST request should be an AJAX request and include CSRF token.\n```\nasync function getToken() {\n  return new Promise((resolve) => {\n  jQuery.ajax({\n    type: \"GET\",\n    url: 'my/logout',\n    headers: {\n      \"X-CSRF-Token\": 'fetch',\n      contentType: \"application/json\",\n    },\n    success: function(data, textStatus, request){\n      resolve(request.getResponseHeader('X-CSRF-Token'));\n    },\n   });\n });\n};\n```\nPOST request example:\n```\nconst token = await getToken();\njQuery.ajax({\n  type: \"POST\",\n  url: \"my/logout\",\n  headers: {\n    \"X-CSRF-Token\": token,\n    contentType: \"application/json\",\n  },\n  success: function (data) {\n    window.location.href = data;\n  }\n});\n```\n**Note**:  Make sure that url field matches logoutEndpoint.\n\n### *destinations* property\n\nLet's say you have a destination called `node-backend`. You can specify options for it by adding the `destinations` property in your xs-app.json:\n```json\n\"destinations\": {\n  \"node-backend\": {}\n}\n```\nThe value of `node-backend` should be an object with the following properties:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nlogoutPath | String | x | The logout endpoint for your destination.\nlogoutMethod | String | x | Could be POST, PUT, GET. The default value is POST.\n\nThe `logoutPath` will be called when [Central Logout](#central-logout) is triggered or a session is deleted due to timeout.\nThe request to the `logoutPath` will contain additional headers, including the JWT token.\nThe `logoutMethod` property specifies the HTTP method with which the `logoutPath` will be requested. For example:\n```json\n{\n  \"destinations\": {\n    \"node-backend\": {\n      \"logoutPath\": \"/ui5logout\",\n      \"logoutMethod\": \"GET\"\n    }\n  }\n}\n```\n\n### *services* property\n\nLet's say you have a service called `com.sap.appbasic.country`. You can specify options for it by adding the `services` property in your xs-app.json:\n```json\n\"services\": {\n  \"com.sap.appbasic.country\": {}\n}\n```\nThe value of `com.sap.appbasic.country` should be an object with the following properties:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nendpoint | String | x | The name of the attribute in the VCAP_SERVICES that contains the URL of the service.  \nlogoutPath | String | x | The path to be used when logging out from the service.\nlogoutMethod | String | x | Could be POST, PUT, GET. The default value is POST.\n\nThe `logoutPath` will be called when [Central Logout](#central-logout) is triggered or a session is deleted due to timeout.\nThe request to the `logoutPath` will contain additional headers, including the JWT token in header `authorization` and approuter host in header `x-approuter-host`.\nThe `logoutMethod` property specifies the HTTP method with which the `logoutPath` will be requested. For example:\n```json\n{\n  \"services\": {\n    \"com.sap.appbasic.country\": {\n      \"endpoint\": \"countryservice\",\n      \"logoutPath\": \"/countrieslogout\",\n      \"logoutMethod\": \"GET\"\n    }\n  }\n}\n```\n\n### *responseHeaders* property\n\nWith the custom response header property, you can add headers, which the application router returns to the client in its responses.<br> \nThe property is an array of objects, each object having the following properties:\n\nProperty | Type         | Optional | Description\n-------- | ------------ |:--------:| -----------\nname     | String       |          | response header name\nvalue    | String       |          | response header value\n\n\nExample:\n```json\n{ \"responseHeaders\" : [\n    {\"name\": \"header1\", \"value\": \"value1\"},\n    {\"name\": \"header2\", \"value\": \"value2\"}\n  ]\n}\n```\n\n### *compression* property\nBy default text resources are compressed before being sent to the client.\nThe default threshold for using compression is 1K. Text resources under this size will not be compressed.\nIf you need to change the compression size threshold, you can add the optional property `minSize`.\n\nHere is an example of a compression section (2048 bytes):\n```json\n{\n  \"compression\": {\n      \"minSize\": 2048\n  }\n}\n```\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nminSize | Number | x | Text resources larger than this size will be compressed.\nenabled | Boolean | x | Globally disables or enables compression. Default value is true.\ncompressResponseMixedTypeContent | Boolean | x | Determines whether response content of multipart/mixed content type should be compressed. The default value is false.\n\n**Note:** There are 3 ways to disable compression:\n* Global - within the compression section add ```\"enabled\": false```\n* Front-End - the client sends a header Accept-Encoding which omits gzip\n* Backend  - the application sends a header Cache-Control with the 'no-transform' directive\n\nExample of globally disabling compression using the environment variable `COMPRESSION`:\n```json\n{\n  \"enabled\": false\n}\n```\n\n**Note:** The header field `Content-Length` is used to determine the resource size.\nIf `Content-Length` is missing, the chunk size is used to determine whether to compress the resource.\nFor more information, see the npm module compression.\n\nHere is a complete example of the compression environment variable:\n```json\n  env:\n   COMPRESSION: >\n        { \n\t  \"enabled\": true,\n\t  \"minSize\": 2048,\n\t  \"compressResponseMixedTypeContent\": true\n\t  }\n```\n\n### *pluginMetadataEndpoint* property\n\nExample:\n```json\n{\n  \"pluginMetadataEndpoint\": \"/metadata\"\n}\n```\n\n**Note**: If you request relative path `/metadata` of your application, you will receive a JSON with configured plugins.\n\n### *whitelistService* property\n\nThe *whitelistService* property is used for enabling the allowlist service that prevents clickjack attacks.\nAn endpoint accepting GET requests will be opened at the relative path configured in the `endpoint` property.\nFor more details see [Allowlist service](#whitelist-service) section.\n\nExample:\n```json\n{\n  \"whitelistService\": {\n    \"endpoint\": \"/whitelist/service\"\n  }\n}\n```\n\n### *websockets* property\n\nFor more details about the web socket communication see [Web sockets](#web-sockets) section.\n\nExample:\n```json\n{\n  \"websockets\": {\n    \"enabled\": true\n  }\n}\n```\n\nTo use Websockets when approuter is integrated with HTML5 Application Repository, this property should be added to the xs-app.json of the deployed HTML5 application. When an incoming request for an application in the repository goes through approuter, approuter retrieves the application's configuration from the repository. If this flag is set, approuter creates a websockets connection with the backend (the target url of the request) and acts as a proxy which delivers messages on top of ws protocol from the backend to the user and vice versa.\n\n### *errorPage* property\n\nBy default, errors originating in the application router are shown the [status code](https://nodejs.org/api/http.html#http_http_status_codes) of the error.\nIt is also possible to display a custom error page using the `errorPage` property.\n\nThe property is an array of objects, each object having the following properties:\n\nProperty | Type         | Optional | Description\n-------- | ------------ |:--------:| -----------\nstatus   | Number/Array |          | HTTP status code\nfile     | String       |          | File path relative to the working directory of the application router\n\n\nExample:\n```json\n{ \"errorPage\" : [\n    {\"status\": [400,401,402], \"file\": \"./custom-err-40x.html\"},\n    {\"status\": 501, \"file\": \"./http_resources/custom-err-501.html\"}\n  ]\n}\n```\nIn the example above 400, 401 and 402 errors would be shown the content of  `./custom-err-4xx.html` and for 501 errors the user would see `./http_resources/custom-err-501.html`.\n\n**Note:** The errorPage conifiguration section has no effect on errors generated outside of the application router.\n\n### *cors* property\n\nWith the cors property, you can support cross-origin requests.<br> \nIf a cross-origin resource sharing (CORS) configuration exists in both the environment variables and the application router configuration file (xs-app.json), the application router gives priority to the CORS configuration in the application router configuration file.<br> \nFor more information about the CORS configuration see [Cross-Origin Resource Sharing configuration](#cross-origin-resource-sharing-configuration).\n\n### Complete example of an *xs-app.json* configuration file \n#### Without HTML5 Application Repository integration:\n```json\n{\n  \"welcomeFile\": \"index.html\",\n  \"authenticationMethod\": \"route\",\n  \"sessionTimeout\": 10,\n  \"pluginMetadataEndpoint\": \"/metadata\",\n  \"routes\": [\n    {\n      \"source\": \"^/sap/ui5/1(.*)$\",\n      \"target\": \"$1\",\n      \"destination\": \"ui5\",\n      \"csrfProtection\": false\n    },\n    {\n      \"source\": \"/employeeData/(.*)\",\n      \"target\": \"/services/employeeService/$1\",\n      \"destination\": \"employeeServices\",\n      \"authenticationType\": \"xsuaa\",\n      \"scope\": [\"$XSAPPNAME.viewer\", \"$XSAPPNAME.writer\"],\n      \"csrfProtection\": true\n    },\n    {\n      \"source\": \"^/(.*)$\",\n      \"target\": \"/web/$1\",\n      \"localDir\": \"static-content\",\n      \"replace\": {\n        \"pathSuffixes\": [\"/abc/index.html\"],\n        \"vars\": [\"NAME\"]\n      }\n    }\n  ],\n  \"login\": {\n    \"callbackEndpoint\": \"/custom/login/callback\"\n  },\n  \"logout\": {\n    \"logoutEndpoint\": \"/my/logout\",\n    \"logoutPage\": \"/logout-page.html\"\n  },\n  \"destinations\": {\n    \"employeeServices\": {\n      \"logoutPath\": \"/services/employeeService/logout\",\n      \"logoutMethod\": \"GET\"\n    }\n  },\n  \"compression\": {\n    \"minSize\": 2048\n  },\n  \"whitelistService\": {\n    \"endpoint\": \"/whitelist/service\"\n  },\n  \"websockets\": {\n    \"enabled\": true\n  },\n  \"errorPage\": [\n    {\"status\": [400,401,402], \"file\": \"/custom-err-4xx.html\"},\n    {\"status\": 501, \"file\": \"/custom-err-501.html\"}\n  ]\n}\n```\n#### With HTML5 Application Repository integration (xs-app.json file stored in HTML5 Application Repository):\n```json\n{\n  \"welcomeFile\": \"index.html\",\n  \"authenticationMethod\": \"route\",\n  \"routes\": [\n    {\n      \"source\": \"/employeeData/(.*)\",\n      \"target\": \"/services/employeeService/$1\",\n      \"destination\": \"employeeServices\",\n      \"authenticationType\": \"xsuaa\",\n      \"scope\": [\"$XSAPPNAME.viewer\", \"$XSAPPNAME.writer\"],\n      \"csrfProtection\": true\n    },\n    {\n       \"source\": \"^/odata/v2/(.*)$\",\n       \"target\": \"$1\",\n       \"service\": \"com.sap.appbasic.country\",\n       \"endpoint\": \"countryservice\"\n    },\n    {\n      \"source\": \"^(/.*)$\",\n      \"target\": \"$1\",\n      \"service\": \"html5-apps-repo-rt\",\n      \"authenticationType\": \"xsuaa\"\n    }\n  ],\n  \"logout\": {\n    \"logoutEndpoint\": \"/my/logout\",\n    \"logoutPage\": \"/logout-page.html\"\n  },\n  \"destinations\": {\n    \"employeeServices\": {\n      \"logoutPath\": \"/services/employeeService/logout\",\n      \"logoutMethod\": \"GET\"\n    }\n  },\n  \"services\": {\n    \"com.sap.appbasic.country\": {\n      \"logoutPath\": \"/countryService/logout\",\n      \"endpoint\": \"countryservice\",\n      \"logoutMethod\": \"GET\"\n    }\n  }\n}\n```\n**Note:** The route in bold is the route that provides access to the HTML5 Application Repository service.\n\n## Headers\n\n### Forwarding Headers\n\nThe application router passes the following x-forwarding-* headers to the route targets:\n\nHeader Name | Description\n----------- | -----------\nx-forwarded-host | Contains the *Host* header which was sent by the client to the application router.\nx-forwarded-proto | Contains the protocol which was used by the client to connect to the application router.\nx-forwarded-for | Contains the address of the client which connects to the application router.\nx-forwarded-path | Contains the original path which was requested by the client.\n\nIf a client performs a path rewriting, it sends the x-forwarded-proto, x-forwarded-host, and the x-forwarded-path headers to the application router. The values of these headers are forwarded to the route targets without modifications instead of being generated from the application router request URL. The x-forwarded-path header of a request does not impact the source pattern of routes in the xs-app.json.\n\n### Hop-by-hop Headers\n\nHop-by-hop headers are meaningful only for a single transport-level connection and therefore are not forwarded by the application router.\nThese headers are:\n* Connection\n* Keep-Alive\n* Public\n* Proxy-Authenticate\n* Transfer-Encoding\n* Upgrade\n\n### Custom Headers\n\n* x-custom-host: Contains the internal reverse proxy host. Relevant only if the application router is used behind an internal reverse proxy as well as an external reverse proxy (EXTERNAL_REVERSE_PROXY  environment variable is set to true). Add this header to the request to internal reverse proxy.\n\nIn a multi-tenancy landscape, the application router will calculate the tenant id based on the value of a certain request header as follows:\n - x-custom-host header or host if EXTERNAL_REVERSE_PROXY is true\n - x-forwarded-host header or host if EXTERNAL_REVERSE_PROXY is false or not specified\n\n### Authorization Header\n* x-approuter-authorization: Contains the JWT or OIDC access token to support the [Service to Application Router](#service-to-application-router-beta-version) scenario.\n\n## CSRF Protection\n\nBy default the application router enables CSRF protection for any HTTP method that is not `HEAD` or `GET` and the route is not public.\nA path is considered _public_, if it does not require authentication. This is the case for routes with `authenticationType: none` or if authentication is disabled completely via the top level property `authenticationMethod: none`.\n\nTo obtain a CSRF token one must send a `GET` or `HEAD` request with a `x-csrf-token: fetch` header to the application router.\nThe application router will return the created token in a `x-csrf-token: <token>` header, where `<token>` will be the value of the CSRF token.\n\nIf a CSRF protected route is requested with any of the above mentioned methods,\n`x-csrf-token: <token>` header should be present in the request with the previously obtained token.\nThis request must use the same session as the fetch token request.\nIf the `x-csrf-token` header is not present or invalid, the application router will return status code *403 Forbidden* and a response header `x-csrf-token: Required`.\n\n## Support of SAP Statistics\n\nThe application router provides performance statistics in an HTTP response header in the following cases:\n- The HTTP request contains an HTTP query parameter (URL parameter) sap-statistics=true.\n- The HTTP request contains an HTTP header field sap-statistics:true.\n\nIf an HTTP request that contains a header field or query parameter with \"sap-statistics=true\" reaches the application router, the application router forwards an \"sap-statistics\" header to the corresponding backend.\nIf SAP statistics is implemented for the backend, the backend returns to the application router a response header containing the statistics information from the backend.\n\nThe application router returns the following statistics information in an sap-statistics-approuter response header:\n- total: The time that has passed between the moment when the request entered into the application router and the moment when the application router started writing the response\n- ext (in case of destination forwarding): The time spent in the backend\n\nEach backend sub-component can add its own response header with the duration measurements when it receives the HTTP header sap-statistics:true.\n\n## Connectivity\n\nThe application router supports integration with SAP Cloud Platform connectivity service. The connectivity service handles proxy access to SAP Cloud Platform cloud connector, which tunnels connections to private network systems. In order to use connectivity, a connectivity service instance should be created and bound to the Approuter application. In addition, the relevant destination configurations should have `proxyType=OnPremise`. Also, a valid XSUAA login token should be obtained via the login flow.\n\n## SaaS Application Registration in Cloud Foundry\n\nThe application router supports SaaS registration. A SaaS business application based on application router may be registered in the SaaS registry  by creating and binding a SaaS Registry service instance.\nAfter fulfilling the CIS process to enable application subscription, the SaaS business application will be visible in the SAP Cloud Platform cockpit in the Cloud Foundry environment for all entitled customers. \nOnce a customer is entitled to the SaaS business application, the subaccounts (tenants) created under the global account will be able to view, subscribe to, and unsubscribe from the application. \nWhen a tenant is subscribed/unsubscribed to/from an application, the tenant will be subscribed/unsubscribed: \n* In the XSUAA instance of the application itself \n* In the reuse services (e.g.: destination ), if the application is dependent on the reuse service. \nAlso, onboarding and offboarding callbacks will be triggered for the subscribed/unsubscribed application and for the reuse services.\n\nIf you use IAS by binding a multi-tenant application router to an identity service instance, the subscription manager service (SMS) should be used to enable the subscription to a subscriber zone and an IAS tenant.\n\n\n### How To Expose Approuter for SaaS Subscription\n\n#### Multi-tenancy\nThe application router should be configured to handle multi-tenant access by maintaining the TENANT_HOST_PATTERN environment configuration.\n\n#### Entitle org for SaaS Application consumption\nThe SaaS Registry service and / or the Subscription Manager service should be available in your space marketplace.\n\n#### Authorize LPS for invoking callbacks\nSaaS business applications should grant LPS the authorization to invoke the application's callbacks. Callback scope should be granted to LPS in the application router’s xs-security.json file:\n\n*xs-security.json:*\n```\n...\n {  \n    \"name\":\"$XSAPPNAME.Callback\",\n    \"description\":\"With this scope set, the callbacks for tenant onboarding, \n     offboarding and getDependencies can be called.\",\n         \"grant-as-authority-to-apps\":[  \n            \"$XSAPPNAME(application,sap-provisioning,tenant-onboarding)\"\n         ]\n  }\n...  \n```\n\n## Authentication with Identity Service (IAS)\nTo use IAS authentication an identity service instance of plan application should be created with the following configuration:\n```\n{\n   \"oauth2-configuration\": {\n     \"redirect-uris\": [\"https://*.<landscapeDomain>/login/callback?authType=ias\"],  //Enable redirect after login\n     \"post-logout-redirect-uris\": [\"https://*.<landscapeDomain>/*/logout.html\" ]    //Enable redirect after logout\n   },\n   \"xsuaa-cross-consumption\":true, //Enable xsuaa trust\n   \"multi-tenant\":true //enable multitenancy\n}\n```\nAuthentication with IAS should be performed using X.509 certificates. To achieve this the identity service should be bound to approuter using the following configuration:\n```\n{\n  \"credential-type\": \"X509_GENERATED\"\n }\n```\n\n#### Register an application in SaaS Registry (SaaS Registry Configuration)\nFor a customer to be able to subscribe to an application through the SAP Cloud Platform cockpit, each SaaS business application should register itself on all CF landscapes where it is deployed.\n\nTo register a SaaS application in LPS, a service instance of saas-registry should be created and the SaaS business application should be bound to it.\nThe instance of saas-registry is created with a configuration json - *saas-config.json:*.\nIn the configuration.json file a url for the getDependencies and onSubscription callbacks must be provided. \nNote that the path segment of these urls are configurable however the tenantId url variable in onSubscription callback must be provided anyway.\n\n```\n{\n\t\"appId\" : \"<appId>\",  # xsappname generated by XSUAA - can be obtained by checking the xsuaa-> xsappname by executing: cf env <application name>\n\t\"appName\" : \"<appName>\",  # Business application name to be shown to subscribers \n\t\"appUrls\": { \n\t\t\"getDependencies\" : \"<approuter-host>/callback/v1.0/dependencies\",\n\t    \"onSubscription\" : \"<approuter-host>/callback/v1.0/tenants/{tenantId}\" \n\t},\n\t\"providerTenantId\" : \"<tenant>\"  # Approuter provider account tenant ID.\n}   \n\n```\n\n#### Register an application in Subscription Manager  (Subscription Manager Configuration)\nTo register an SaaS application in the subscription manager service, a service instance of the subscription manager has to be created and the SaaS business application has to be bound to it. \nThe instance of subscription manager is created with a configuration json file - sms-config.json:. In the configuration.json file, a url for the getDependencies callbacks and the onSubscription callbacks must be provided. \nNote that the path segments of these urls are configurable.\n\n```\n{\n  \"iasServiceInstanceName\" : [\"ias-provider-ias\"], #Name of the related IAS instance\n  \"applicationType\": \"application\",\n  \"xsuaaSaasApplicationServiceInstanceId\": \"88afb2a5-5ab3-409a-9c0c-b70e2b86b1cf\", #SaaS Registry service instance id\n  \"appCallbacks\" : {\n    \"dependenciesCallbacks\" : {\n      \"url\" : \"https://<providerZoneId>--<providerIASTenantId>.<approuterHost>.cert.<landscapeDomain>/v1.0/callback/zones/{zoneId}/dependencies\"\n    },\n    \"subscriptionCallbacks\" : {\n      \"url\" : \"https://<providerZoneId>--<providerIASTenantId>.<approuterHost>.cert.<landscapeDomain>/v1.0/callback/zones/{zoneId}\"\n    }\n  }\n}\n```\nNote that in order to provide certificates the url domain should contain a \"cert\" segment.\nIn addition the TENANT_HOST_PATTERN environment variable should be modified to support requests with the \"cert\" segment. \nFor example:\n```\n^(.*).<approuterHost>.(cert.)?<landscapeDomain>\n```\n\n## Mutual TLS Authentication (mTLS) and Certificates Handling\nApplication router supports certificates usage for token creation and mTLS handshake in backend connections. To enable that the XSUAA or IAS instance bound to the application router should provide in its credentials a certificates chain and a private key\n\nNote that application router also supports providing private key via environment variables: XSUAA_PRIVATE_KEY (XSUAA) and IAS_PRIVATE_KEY (IAS).\n\nIn case certificates and private key exists, application router fetches XSUAA/IAS tokens providing certificates chain and private key.\nWhen forwarding request to business services, application router also uses certificates to create a client_credentials token or exchange the login token.\n\nIf certificates available, HTTP connection to backend is created using private key and a concatenation of intermediate and client certificates, enabling mTLS handshake.\n\nCloud Foundry: client certificate is propagated via the x-forwarded-client-cert header. In order to enable that the backend url should contain a .cert segment in its domain.\n\n## Integration with HTML5 Application Repository\n\nThe application router supports seamless integration with the HTML5 Application Repository service. \nWhen the application router interacts with HTML5 Application Repository to serve HTML5 Applications, all static content and routes (xs-app.json) are retrieved from HTML5 Application Repository. \nIn case application router needs to route to non HTML5 Applications, it is possible to model that in the xs-app.json of the application router.\n\nTo integrate HTML5 Application Repository to an application router based it is required to create an instance of html5-apps-repo service of plan app-runtime and bind it to the application.\nxs-app.json routes that are used to retrieve static content from HTML5 Application Repository may be modeled in the following format:\n\n```\n { \n     \"source\": \"^(/.*)\",                                    \n     \"target\": \"$1\",                                        \n     \"service\": \"html5-apps-repo-rt\", \n     \"authenticationType\": \"xsuaa\"                      \n }\n```\n### HTML5 Application Repository Multitenancy\nThe HTML5 Application Repository is a multitenant service. Non-public HTML5 Applications are visible only to the application providers (with provider subaccounts) and the consumers subscribed to the applications (with consumer subaccounts).\n\nWhen a multitenant application router is subscribed to a subaccount, the HTML5 Application Repository app-runtime instance that is bound to the application router is returned as a dependency, which triggers the subscription to the app-runtime instance.\nYou can also bind HTML5 Application Repository app-host service instances to the application router to enable the subscription of the corresponding HTML5 applications.\nDuring runtime, the application router creates an HTML5 Application Repository app-runtime client_credentials token using the tenant URL that the application router determines from the TENANT_HOST_PATTERN environment variable.\n\nNote:  The creation of the token can fail if the app-runtime instance is not subscribed to the subaccount, which happens if, for example, the application router was subscribed to the subaccount before the HTML5 Application Repository became a multitenant service.\nIn this case the application router will create the token using the provider subaccount.\n\nYou can trigger the subscription to the HTML5 Application Repository app-runtime instance by using the SAAS Provisioning API: see https://api.sap.com/api/APISaasManagerService/resource\n```\nPATCH /saas-manager/v1/application/tenants/{tenantId}/subscriptions\n```\n\nNote:  If you have an old application router version, the HTML5 Application Repository app-runtime client_credentials token is created by using HTML5 application provider subaccount.\n\n### Blocked HTML5 Application Names\n\nThe following strings are used as predefined direct routing URIs, which lead the request to the routing configuration file of the application router: \"favicon.ico\", \"login\".\nTherefore, do not name your HTML5 applications \"favicon.ico\" or \"login\"!\n\n### Known Gaps in Integration with HTML5 Application Repository\n\nThe following limitations apply when application router is bound to HTML5 Application Repository service:\n\n1. It is not possible to implement the \"first\" middleware slot to provide routes dynamically.\n2. No option apart from workingDir can be provided in application router start.\n3. External session management via extensibility is not supported\n\n\n**Note:** Mixed scenario of modeling part of the static content in local resources folder and also retrieving static content from HTML5 Application Repository is not supported.</br>\n**Note:** This feature is only supported in Cloud Foundry. There is no HTML5 Application Repository service in XSA.\n\n### Runtime Processing\n\nDuring runtime, based on request url path (see URL Format), application router will try to fetch the xs-app.json file from the corresponding HTML5 Application in HTML5 Application Repository and use it for routing the request.\nThe following algorithm is applied for request processing:\n* If no HTML5 Application is found in HTML5 Application Repository for current request, central application router xs-app.json will be used for routing\n* If HTML5 Application exists in HTML5 Application Repository but no xs-app.json file is returned, an error message will be issued and request processing will be stopped.\n\n#### URL Format\n\nA valid request to application router that uses HTML5 Application Repository must have the following format:\n```\nhttps://<tenantId>.<appRouterHost>.<domain>/<bsPrefix>.<appName-appVersion>/<resourcePath>\n\n```\nbsPrefix (business service prefix) - Optional\n* It should be used in case the application is provided by a business service bound to this approuter\n\nappName (application name) - Mandatory\n* Used to uniquely identify the application in HTML5 Application Repository persistence\n* Must not contain dots or special characters\n\nappVersion (application version) - Optional\n* Used to uniquely identify a specific application version in HTML5 Application Repository persistence\n* If no version provided, default application version will be used\n\nresourcePath (path to file)\n* The path to the file as it was stored in HTML5 Application Repository persistence\n\nQuery Parameters:\n\nskipXSAppJsonCache - Optional\n* Value: true\n* Supports skipping the usage of cache when getting the xsApp configuration, bringing it remotely and re-setting the cache.\n* Note that the query parameter is removed from request url before route processing.\n\n### Cache Buster Handling\nA cache buster allows the application router to notify the browser to refresh the resources only when the application resources have been changed. Otherwise the resources are always fetched from the browser's cache.\nThis flow applies to requests that should be forwarded to HTML5 Application Repository. If requests are forwarded to backend applications that return data, cache buster handling is not applied.\n\n* When the second path segment of the request url contains the pattern “~timestamp~”, this segment is removed from the subsequent request to HTML5 Application Repository\n* In case the request had a cache buster segment, application router adds to corresponding response the header: Cache-Control: public, max-age=31536000\n\n**Note:** Cache buster flow is only supported in HTML5 Application Repository integration flow.\n\n### Integration with Business Services\n\nApplication router supports integration with Business Services. \nBusiness Services are a flavour of reuse-services that expose specific information in VCAP_SERVICES credentials block that enable application router to serve Business Service UI and/or data.\n* Business Service UI must be stored in HTML5 Application Repository to be accessible from application router\n* Business Service UI must be defined as \"public\" to be accessible from an application router in a different space than the one from where the UI was uploaded \n* Business Service data can be served using two grant types:\n  1. User Token Grant: Application router performs a token exchange between login JWT token and Business Service token and uses it to trigger a request to the Business Service endpoint\n  2. Client Credentials Grant: Application router generates a client_credentials token and uses it to trigger a request to the Business Service endpoint\n\n#### Business Service Credentials\nWhile binding a Business Service instance to application router the following information should be provided in VCAP_SERVICES credentials:\n\n* sap.cloud.service: Service name as referenced from xs-app.json route and business service prefix (if Business Service UI provided) - Mandatory\n* sap.cloud.service.alias: Short service name alias for user friendly URL business service prefix- Optional\n* endpoints: One or more endpoints that can be used to access Business Service data. \n* html5-apps-repo: html5-apps-repo.app_host_id contains one or more html5-apps-repo service instance GUIDs that can be used to retrieve Business Service UIs - Optional\n* saasregistryenabled: flag that indicates that this Business Service supports SaaS Registry subscription. If provided, application router will return this Business Service xsappname in SaaS Registry \n  getDependencies callback - Optional\n* grant_type: the grant type that should be used to trigger requests to the Business Service. Allowed values: user_token or client_credentials. \n  Default value, in case this attribute is not provided, user_token - Optional\n* forwardiastoken: flag that indicates if, in addition to the exchanged xsuaa token, the IAS token should be forwarded as well. IAS token is forwarded in request header: `x-ias-token`\n\n\nThe value of `endpoints` should be an object with the following properties:\n\nProperty | Type | Optional | Default |Description\n-------- | ---- |:--------:| ---- |-----------\nurl | String |   | |URL to access the Business Service data.\ntimeout | Number | x | 30000ms |Positive integer representing the maximum wait time for a response (in milliseconds) from the Business Service. \n\n\nFor example:\n```\n\"country\": [\n   {\n    ...\n    \"credentials\": {\n     \"sap.cloud.service\": \"com.sap.appbasic.country\", \n     \"sap.cloud.service.alias\": \"country\",            \n     \"endpoints\": {                                   \n      \"countryservice\": { \"url\": https://icf-countriesapp-test-service.cfapps.sap.hana.ondemand.com/odata/v2/countryservice\"},\n      \"countryconfig\":  { \n            \"url\": https://icf-countriesapp-test-service.cfapps.sap.hana.ondemand.com/rest/v1/countryconfig\",\n            \"timeout\": 120000 \n      }\n     },\n     \"html5-apps-repo\": {                           \n      \"app_host_id\": \"1bd7c044-6cf4-4c5a-b904-2d3f44cd5569, 1cd7c044-6cf4-4c5a-b904-2d3f44cd54445\"\n     },\n     \"saasregistryenabled\": true,\n     \"grant_type\": \"user_token\"\n   ....\n```\n\n#### Accessing Business Service Data\nTo access Business Service data xs-app.json configuration file should have a route referencing a specific sap.cloud.service or sap.cloud.service.alias via the service attribute.\nIf an endpoint attribute is also modeled, it will be used to get the service url otherwise the fallback url or uri attribute will be used.\n\nFor example:\n```\n\"routes\": [\n    {\n      \"source\": \"^/odata/v2/(.*)$\",\n      \"target\": \"$1\",\n      \"service\": \"com.sap.appbasic.country\",\n      \"endpoint\": \"countryservice\"\n    },\n\n```\n\nIn order to support JWT token exchange, the login JWT token should contain the uaa.user scope. For that the xs-security configuration must contain a role template that references the uaa.user scope.\nFor example:\n```\n{\n    \"xsappname\"   : \"simple-approuter\",\n    \"tenant-mode\" : \"shared\",\n    \"scopes\": [\n        {\n            \"name\": \"uaa.user\",\n            \"description\": \"UAA\"\n        },\n        {\n            \"name\": \"$XSAPPNAME.simple-approuter.admin\",\n            \"description\": \"Simple approuter administrator\"\n        }\n    ],\n    \"role-templates\": [\n        {\n            \"name\": \"Token_Exchange\",\n            \"description\": \"UAA\",\n            \"scope-references\": [\n                \"uaa.user\"\n            ]\n        },\n        {\n            \"name\": \"simple-approuter-admin\",\n            \"description\": \"Simple approuter administrator\",\n            \"scope-references\": [\n                \"$XSAPPNAME.simple-approuter.admin\"\n            ]\n        }\n    ]\n}\n```\n\n#### Accessing Business Service UI\nBusiness Service UI's must be stored in HTML5 Application Repository and defined in their manifest.json files as \"public: true\" in order to be accessible from an application router\napplication that is typically running in a different space than the Business Service space. In addition dataSources uris must be relative to base url (no slash as first character).\n\nBusiness Service manifest.json example:\n\n```\n{\n  “sap.app”: {\n    “id”:“com.sap.appbasic.country.list”,\n    “applicationVersion: {\n    “version”: “1.0.0”\n  },\n  \"dataSources\": {\n    \"mainService\":{\n      \"uri\": \"odata/v2/countryservice\",\n      \"type\": \"OData\"\n    }\n  },\n  “sap.cloud”: {\n    \"public\": true,\n    “service”: “com.sap.appbasic.country“\n  }\n}\n```\n\nA Business Service that exposes UI must provide one or more app-host GUIDs in an html5-apps-repo block in VCAP_SERVICES credentials (see Business Service credentials).\n\nTo access Business Service UI the request url that hits application router must contain a business service prefix as described above.\n\nRequest URL example:\n```\n  https://approuter-repo-examples.cfapps.sap.hana.ondemand.com/comsapappbasiccountry.comsapappbasicscountrylist/test/flpSandbox.html\n\n```\nIn this example \"comsapappbasiccountry\" is the business service prefix which matches the sap.cloud.service attribute in country service VCAP_SERVICES credentials (without dots).\nThe \"comsapappbasicscountrylist\" is the name of the HTML5 Application as defined in the app.id attribute in the manifest.json (without dots).\n\n## Web Sockets\nThe application router is capable of forwarding web socket communication.\nIn order to use the web socket communication, it should be enabled through the [*websockets* property](#websockets-property).\nIf the backend service requires authentication then the upgrade request should contain a valid session cookie.\nThe destination schemas \"ws\" and \"wss\" are supported in addition to \"http\" and \"https\".\nWhen the application router receives an upgrade request, it verifies that the `Origin` header holds the URL of the application router.\nIf this is not the case, then an HTTP response with status 403 is returned to the client.\nThis origin verification can be further configured via the environment variable `WS_ALLOWED_ORIGINS`.\nIt contains the allowed origins the application router verifies against. It's structure is the same as [`CJ_PROTECT_WHITELIST`](#configuring-allowed-hostnames--domains).\n\n**Note:** A current limitation is that a web socket ping is not forwarded to the backend service.\n\n## Session Handling\n\nThe application router establishes a session with the client (browser) using a session cookie.\n\nThe application router intercepts all _session_ cookies, sent by backend services and stores them in its own session. Backend session cookies are not sent to the client in order to prevent cookie collisions. Upon subsequent requests the application router sends back the cookies to the respective backend services so they can establish their own sessions.\n**Note:** Non-session cookies from backend services are forwarded to the client. Cookie collisions may occur and the application should be able to handle them.\n\nIf a pending request is canceled, the request cancellation will be propagated to the backend service.\n\nIf there is no session in the application router, either because there has been a session timeout or because no session has been created yet, and if the incoming request matches a non-public route, the application router triggers a redirect to the authentication service (UAA or IAS).\nAfter a successful login, a redirect back to application router takes place using the login callback endpoint, which triggers the creation of a new session.\nIf the incoming request is an AJAX request (has the request header X-Requested-With: XMLHttpRequest) or if the HTTP verb is not GET and no session exists (there is no session cookie and the request doesn’t have an x-approuter-authorization header), the application router returns the response code 401 - Unauthorized. This enables the client application to handle the 401 response before it navigates to the authentication service. For example, the application can store data entered by the user and prevent data loss.\nWhen the handling of the 401 response is completed, the client application should send a request without an xmlhttprequest object to trigger the application router authentication flow.\n\n### Session Contents\n\n* CSRF token - the generated CSRF token so it can be verified against the token in the request, see [CSRF Protection](#csrf-protection) above.\n* OAuth token - JSON Web Token (JWT) fetched from UAA and forwarded to backend services in the Authorization header. The client never gets this token.\nThe application router refreshes the JWT automatically before it expires (if the session is valid). By default this routine is triggered 5 minutes before the expiration of the JWT.\nThis can also be configured via the `JWT_REFRESH` environment variable (the value is in minutes). If `JWT_REFRESH` is set to 0 then the refresh is disabled.\n* OAuth scopes - scopes owned by the current user, used to check if the user has the scope required for each request. See `scope` in [Routes](#routes).\n* Backend session cookies - all session cookies sent by backend services.\n* Business Services OAuth tokens - JSON Web Token (JWT) exchanged and used to access re-use services bound to the application router\n\n**Note:** If the JWT is close to expiration and the session is still active a JWT refresh will be triggered in `JWT_REFRESH` minutes before expiration.\n`JWT_REFRESH` is an environment variable stating the number of minutes before the JWT expiration the refresh will be triggered. The default value is 5 minutes.\n\n## External Session Management\nThe application router supports a backup of user sessions in an external session store. This enables the session recovery in case the application router instance that stores a session crashes and another application router instance has to continue handling the running user session.  \nTo enable this capability, you must bind a service instance of a service that supports a fast persistence store, such as *Redis*. When such a service is bound, the application router backs up the in-memory session information into the external persistency store.  \nIf, in subsequent requests, the session information is not found in the in-memory session store, the application router tries to rebuild the in-memory session information from the external persistency store.   \n\nThe sessions are stored compressed. For capacity planning, you can assume 50 Kb per session storage in the fast persistence store. \n\n### External Session Management Configuration\nIn order to use this feature, you have to set the following environment variable:\n\n```EXT_SESSION_MGT```  \n\nThe variable value must be defined in the JSON format and provide the following properties:\n* **instanceName (mandatory)** - the name of the service instance of the storage service.\n* **storageType (mandatory)** - the type of the storage, for example - \"redis\". Note that if no custom storage driver is used, only “redis” is allowed.\n* **sessionSecret (mandatory)** - a secret to be used to generate a session cookie. Please generate a unique string with at least 64 characters.\n\nFor example: \n```json\n{\n    \"instanceName\": \"approuter-redis\",\n    \"storageType\": \"redis\",\n    \"sessionSecret\": \"someuniquesessionsecret\"\n}\n```\n\n> **_NOTE:_** Currently, the application router supports only a Redis store\n\n### Configuration of a Custom Storage Driver\nFor information about the configuration of a custom storage driver, see [Configuring a custom storage driver](doc/sessionManagement.md#custom-storage-driver)\n\n\n## Service to Application Router\n\nThe application router can receive a consumer service xsuaa JWT or IAS OIDC access token and use it to access the UI and the data. The token is passed to the application router in the \"x-approuter-authorization\" header of the request. For more information, see [Authorization Header](#authorization-header-beta-version).\n\nCookie Handling:\nIn this flow client cookies are merged to backend cookies in case a backend cookie with the same key does not exist.\n\nIf you have configured [external session management](#external-session-management), an external session is created for each token in the external session management service (for example, in Redis). Such an external session has the same expiration time as the token for which it was created. \nThe application router uses the external session to store cached data, such as the exchanged tokens and destination configurations, to improve the performance by reducing roundtrips to the authentication and destination services.\n\n**Note**: The xsuaa JWT or IAS OIDC token is generated with the same xsuaa service or identity instance that is bound to the application router. \n\n\n## Central Logout\n\nCentral Logout can be client initiated or can be triggered due to session timeout.\n* Client initiated\n  * Deletes the user session.\n  * Requests all backend services logout paths (if configured in the [destinations property](#destinations-property)).\n  * Request all business services logout paths (if configured in the [services property](#services-property)).\n  * Redirects the client to logout from UAA.\n  * If configured, redirects back to a custom page (for XS OnPremise Runtime only). For more information, see [logout-property](#logout-property).\n* Session timeout\n  * Deletes the user session.\n  * Requests all backend services logout paths (if configured in the [destinations property](#destinations-property)).\n  * Requests all business services logout paths (if configured in the [services property](#services-property)).\n\nThe session timeout can be configured with the [SESSION_TIMEOUT](#session-timeout) variable through the environment.\n\n## Allowlist Service\n\nA protection concept is designed in SAP that uses UI libraries and an allowlist service for proper clickjack protection of applications. The general idea is that when an html page needs to be rendered in a frame, a check is done by calling the allowlist service to validate if the parent frame is allowed to render the content in a frame. The actual check is provided by the allowlist service.\n\n### Enable the service\n\nTo enable the allowlist service and to open the service endpoint you need to configure the [whitelistService](#whitelistservice-property) property in *xs-app.json*.\n\n### Configuring allowed hostnames / domains\n\nThe allowlist service reads allowed hostnames and domains from the environment variable `CJ_PROTECT_WHITELIST`.\nThe content is a JSON array of object with the following properties:\n\nProperty | Type | Optional | Description\n-------- | ---- |:--------:| -----------\nprotocol | String | x | URI scheme, for example `http`.\nhost | String |  | Hostname / domain - valid hostname, or domain defined with a star (\\*), for example `some.concrete.hostname`, or `*.example.domain`.\nport | String / Number | x | Port string or number containing a valid port.\n\nExample:\n```json\n[\n  {\n    \"protocol\": \"http\",\n    \"host\": \"*.example.domain\",\n    \"port\": 12345\n  },\n  {\n    \"host\": \"some.concrete.hostname\",\n  }\n]\n```\n\nMatching is done against provided properties. For example if only host is provided then the service will return `framing: true` for all and matching will be for all schemas and protocols.\n\n### Return value\n\nThe service accepts only `GET` requests and the response is a JSON object.\nThe allowlist service call uses the parent origin as URI parameter (URL encoded) as follows:\n\n```\nGET url/to/whitelist/service?parentOrigin=https://parent.domain.com\n```\n\nThe response is a JSON object with following properties:\n\n```\n{\n    \"version\" : \"1.0\",\n    \"active\"  : true | false,                   // indicates whether framing control is switched on\n    \"origin\"  : \"<same as passed to service>\",\n    \"framing\" : true | false                    // if active, describes if framing should be allowed\n}\n```\n\nThe property `active` will have value `false` only in case `CJ_PROTECT_WHITELIST` is not provided.\n\n**Note**: Keep in mind that the application router sends by default the X-Frame-Options header with value `SAMEORIGIN`, in the case the allowlist service is enabled, this header value probably needs to be changed, see the [X-Frame-Options](#x-frame-options-configuration) header section for details how to change it.\n\n## User API Service\nThe application router exposes a user API that returns the details of the user who is logged in. This API supports two endpoints: `/currentUser` and `/attributes`.\nThe /currentUser endpoint returns all details of logged in users, while the /attributes endpoint returns the main user properties.\nThe user API can be implemented by modelling an xs-app.json route using service sap-approuter-userapi.\n\nExamples:\n\nHandle both endpoints\n```\n{\n    \"source\": \"^/user-api(.*)\",\n    \"target\": \"$1\",\n    \"service\": \"sap-approuter-userapi\"\n},\n```\n\nHandle `/currentUser` endpoint only\n```\n{\n    \"source\": \"^/user-api/currentUser$\",\n    \"target\": \"/currentUser\",\n    \"service\": \"sap-approuter-userapi\"\n},\n```\nThe /currentUser endpoint response has the following format:\n```\n{\n   \"firstname\": \"John\",\n   \"lastname\": \"Doe\",\n   \"email\": \"john.doe@sap.com\",\n   \"name\": \"john.doe@sap.com\",\n   \"displayName\": \"John Doe (john.doe@sap.com)\"\n}\n```\nThe /attributes endpoint response has the following format:\n```\n{\n   \"firstname\": \"John\",\n   \"lastname\": \"Doe\",\n   \"email\": \"john.doe@sap.com\",\n   \"name\": \"john.doe@sap.com\"\n}\n```\nNote that the \"name\" property is the user ID in the identity provider, which in many cases is also the email address.\n## Scaling\n\nThe application router keeps all established sessions in local memory and does not sync them across multiple instances.\nIn order to scale the application router to multiple instances, session stickiness should be enabled.\nThis means that each HTTP session is handled by the same application router instance.\n\nIn Cloud Foundry's router, session stickiness is enabled from version 0.1.0.\n\nIn SAP HANA XS Advanced OnPremise Runtime session stickiness is enabled, if SAP Web Dispatcher is used as a router.\nThis is set by default from version 0.1535 of SAP HANA XS Advanced runtime.\nIf your on-premise runtime uses *nginx* as router, you can switch to SAP Web Dispatcher by passing the command line option `--router=webdispatcher` to `xs-controller`.\n\n## Sizing Guide for Application Router\n\nThe memory consumption of the application router is described in the [sizing guide](doc/sizingGuide.md).\n\n## Configure server-side HTTPS\n\nYou can configure application router to accept only HTTPS connections. See `httpsOptions` option of [start](doc/extending.md#startoptions-callback) function.\n\n## Audit-Log Service\n\nThe application router logs information regarding unauthorized requests. To avoid exposure of private information such as user id and IP address,  you must bind the consuming application to an instance of the audit-log service.\n\nIf you do not bind the consuming application to the audit-log service, the application router will log this information to the console output, using asterisks to mask the user id and IP address. (This is the default behavior.)\n\n\n## Troubleshooting\n\nThe application router uses _@sap/logging_ package so all of its features are available to control logging.\nFor example to set all logging and tracing to finest level set `XS_APP_LOG_LEVEL` environment variable to `debug`.\n\nIf the application is deployed on Cloud Foundry, you can change the log level by running command:\n```sh\ncf set-env <application-name> XS_APP_LOG_LEVEL debug\n```\n\nIf the application is deployed on XS Advanced On-premise Runtime, you can change the log level without restarting the application.\nFor example this command will set all logging and tracing to finest level.\n```sh\nxs set-logging-level <application-name> \"*\" debug\n```\nSee _@sap/logging_ documentation for details.\n\nYou can enable additional traces of the incoming and outgoing requests by setting the environment variable `REQUEST_TRACE` to `true`.\nWhen enabled they will log basic information for every incoming and outgoing request of the application router. This could have a performance impact.\n\nSome of the libraries used by this package employ other tracing mechanisms. For example many use the popular [debug](https://www.npmjs.com/package/debug) package. This means that by setting `DEBUG` environment variable, you can enable additional traces. Set it to `*` to enable all of them, but be careful as the output may be overwhelming.\nIn addition internal Node.js traces can be enabled via `NODE_DEBUG` environment variable. [This post](http://www.juliengilli.com/2013/05/26/Using-Node.js-NODE_DEBUG-for-fun-and-profit/) describes it in more detail.\n\n\n**Warning:** Enabling some of these options may trace security sensitive data, so use with caution.\n\nThe _@sap/logging_ package sets the header 'x-request-id' in the application router's responses.\nThis is useful if you would like to search entries belonging to a particular request execution in the application router's logs and traces.\nNote that the application router does not change the headers received from the backend and being forwarded to the client.\nIf the backend is a Node.js application which uses the _@sap/logging_ package (and also sets the 'x-request-id' header), then the value of the header\nthat the client will receive will be the one coming from the backend and not the one of the application router itself.\n\n## Getting Support\nCreate a BCP ticket on component `BC-XS-APR`\n\n## Extending Application Router\nSee [extending](doc/extending.md) for information how to extend the application router\nwith custom logic.\n\n## Best practices\n\n### Security best practices\n\n#### Content-Security-Policy\nSetting the `Content-Security-Policy` header - this is a response header which informs browsers (capable of interpreting it) about the trusted sources\nfrom which an application expects to load resources. This mechanism allows the client to detect and block malicious scripts injected into an application.\nA value can be set via the `httpHeaders` environment variable in the [additional headers configuration](#additional-headers-configuration).\nThe value represents a security policy which contains directive-value pairs. The value of a directive is an allowlist of trusted sources.\nIn case content-security-policy headers are returned from backend, they will override `httpHeaders` configuration. \nTo enable returning both (backend and local content-security-policy headers), configure environment variable `MERGE_CSP_HEADERS`.\n\nRefer to the `Content-Security-Policy` specification for more information on the header's value.\n\n**Note:** Usage of the `Content-Security-Policy` header is considered second line of defense. An application should always provide proper input validation and output encoding.\n\n### Identity Provider Configuration Best Practices\n\n#### Modelling options:\n\n1. If you to enable login in same browser window as doctor and patient you can create 2 cf routes to same approuter:\n```https://approuter-doctors.cfapps.hana.com/myapp/doctors/index.html```\n```json\n{\n  \"source\": \"^/doctors(/.*)\",\n  \"target\": \"$1\",\n  \"service\": \"html5-apps-repo-rt\",\n  \"authenticationType\": \"xsuaa\",\n  \"identityProvider\": \"doctorsIDP\"\n}\n```\n\n```https://approuter-patients.cfapps.hana.com/myapp/patients/index.html```\n```json\n{\n  \"source\": \"^/patients(/.*)\",\n  \"target\": \"$1\",\n  \"service\": \"html5-apps-repo-rt\",\n  \"authenticationType\": \"xsuaa\",\n  \"identityProvider\": \"patrientsIDP\"\n}\n```\n\n2. If you to enable single access at a time (force logout from doctors idp and re-login to patients idp), create a single cf route\n```https://approuter-hospital.cfapps.hana.com/myapp/doctors/index.html```\n```json\n{\n  \"source\": \"^/doctors(/.*)\",\n  \"target\": \"$1\",\n  \"service\": \"html5-apps-repo-rt\",\n  \"authenticationType\": \"xsuaa\",\n  \"identityProvider\": \"doctorsIDP\"\n}\n```\n \n```https://approuter-hospital.cfapps.hana.com/myapp/patients/index.html```\n```json\n{\n  \"source\": \"^/patients(/.*)\",\n  \"target\": \"$1\",\n  \"service\": \"html5-apps-repo-rt\",\n  \"authenticationType\": \"xsuaa\",\n  \"identityProvider\": \"patrientsIDP\"\n}\n```\n",
      "changelog": "# Change Log\nAll notable changes to this project will be documented in this file.\n\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\n\n## 10.15.3 - 2022-04-26\n\n### Fixed\n- Request contains an invalid x-csrf-token\n\n## 10.15.2 - 2022-04-24\n\n### Fixed\n- Improve readme documentation\n- Token xsrf undefined, when approuter bound to external session storage \n\n### Updated dependencies\n- deps: @sap/logging@6.1.1\n- deps: async@3.2.3\n\n## 10.15.1 - 2022-04-07\n\n### Updated dependencies\n- should-send-same-site-none removed\n- request.js removed\n- moment removed\n- deps: urijs@1.19.11\n- deps: @sap/logging@6.1.0\n\n## 10.15.0 -  2022-04-03\n\n### Added\n- External session management support in service2approuter flow\n- Return auditLog, if has multi-tenant plan oauth2, as a dependency during subscription creation\n- Write auditLog error message into subscription tenant, when approuter runs in multi-tenant mode\n- Private-link proxy type support\n- Error stack in error-handler\n\n### Updated dependencies\n- deps: body-parser@1.2.0\n\n### Fixed\n- Type error in case of missing app.services\n\n## 10.14.2 -  2022-03-23\n\n### Updated dependencies\n- deps: node-forge@1.3.0\n\n## 10.14.1 -  2022-03-23\n\n### Fixed\n- Cookie addition in decrypt cookies and check in merge cookies\n- Improve destination service resilience in SaaS Approuter\n\n## 10.14.0 - 2022-03-15\n\n### Added\n- Auto-Pipeline for ioredis support\n\n### Fixed\n- web sockets fixed status code\n- IAS logout page redirect\n- convert environment variable EXTERNAL_REVERSE_PROXY to boolean type\n\n### Updated dependencies\n- bluebird removed\n\n## 10.13.2 - 2022-03-08\n\n### Fixed\n- Change log level to info for missing host destination\n- Null object error for user property\n\n### Updated dependencies\n- deps: urijs@1.19.10\n- deps: @sap/audit-logging@5.5.1\n- deps: @sap/xsenv@3.2.1\n\n## 10.13.1 - 2022-03-01\n\n### Fixed\n- Add check for correlationId header existence in getCorrelationId\n\n## 10.13.0 - 2022-02-27\n\n### Added \n- Support multiple zoneIds in same IAS tenant\n\n### Fixed\n- Avoid reading uaa property from a null object\n- Improve error handling in exchange token\n\n### Updated dependencies\n- deps: urijs@1.19.8\n- deps: axios@0.26.0\n\n## 10.12.0 - 2022-01-30\n\n### Added \n- Replace 'request' module by 'axios'\n- Support query params in user-api\n\n### Updated dependencies\n- deps: tough-cookie@4.0.0\n\n## 10.11.3 - 2022-01-25\n\n### Updated dependencies\n- deps: @sap/audit-logging@5.4.1\n- deps: @sap/xssec@3.2.12\n\n## 10.11.2 - 2022-01-13\n\n### Updated dependencies\n- deps: scmp@1.0.0\n\n## 10.11.1 - 2022-01-12\n\n### Updated dependencies\n- deps: node-forge@1.2.1\n\n## 10.11.0 - 2022-01-11\n\n### Added\n- POST method support for logout flows\n- New env. variable to skip loading client_credentials tokens on approuter start\n- Adding minimumTokenValidity from env variable\n\n### Fixed\n- Get uaadomain from subscription manager in case XSUAA is not bound\n- Logs reduction -remove stackTrace on error log level\n- Websocket try to get status code from message string when statusCode property undefined\n- isDynamicRouting read defaultEnv.json file only in development environment\n- accessToken references\n\n### Updated dependencies\n- deps: node-forge@1.2.0\n\n## 10.10.4 - 2021-12-16\n\n### Fixed\n- SameSite cookie property concatenation   \n\n## 10.10.3 - 2021-12-13\n\n### Fixed\n- Handle bad cookie decryption error\n- Fix missing session when token validity too short\n- Set client_credentials token by tenant timeout to 5000 ms\n- setXForwardedFor remove headers correction\n\n### Added\n- Adding serverKeepAlive from env variable to routerConfig\n\n### Updated dependencies\n- deps: @sap/audit-logging@5.3.0\n- deps: debug@4.3.2 \n- deps: uuid@8.3.2\n- deps: scmp@2.1.0\n\n## 10.10.2 - 2021-12-02\n\n### Fixed\n- Adding expiration date on login-callback-provider check \n- Increase client_credentials token request timeout to 5000 ms\n- Protect accessToken references\n\n### Updated dependencies\n- deps: compressible@2.0.18\n- deps: sap/xssec@3.2.11\n\n## 10.10.1 - 2021-11-21\n\n### Fixed\n- Avoid sending certificates if not authentication type is client certificate or trusted certificate\n\n## 10.10.0 - 2021-11-18\n\n### Added\n- Propagate correlationId to xssec and UAA requests\n- Support compression of response content with multipart/mixed content type\n\n### Fixed\n- Subscriber destination consumption in public flows\n- Samesite attribute in callback login response header\n- Support destination trust certificate propagation (format pem)\n\n### Updated dependencies\n- deps: sap/xssec@3.2.10\n\n## 10.9.2 - 2021-11-09\n\n### Fixed\n- Backend invalid cookies handling\n- Add checking for missing xsappConfig file along with xs-app.json on configuration load\n\n\n### Updated dependencies\n- deps: cf-nodejs-logging-support@6.11.0\n- deps: validator@13.7.0\n\n## 10.9.1 - 2021-10-28\n\n### Fixed\n- Missing HTML5 repo token in cache failure \n\n## 10.9.0 - 2021-10-24\n\n### Added\n- Additional cookie logs\n- Support client certificate authentication (format p12)\n- Change log level to info for backend logs \n- IAS token support in service to approuter flow\n\n### Updated dependencies\n- deps: sap/xssec@3.2.8\n\n## 10.8.2 - 2021-10-11\n\n### Fixed\n- Remove clientsecret validation for mtls\n\n## 10.8.1 - 2021-10-07\n\n### Added\n- New audit log SDK support\n- Kyma Redis credentials documentation\n\n### Fixed\n- Redis credentials handling in Kyma\n- X509 client secret validation in uua schema \n\n### Updated dependencies\n- deps: http-proxy-agent@4.0.1\n- deps: https-proxy-agent@5.0.0\n- deps: @sap/audit-logging@5.1.0\n\n## 10.8.0 - 2021-09-13\n\n### Added\n- Propagate destination headers in approuter\n\n### Fixed\n- Sessions expiration in Redis\n- Connections to Redis on Azure with premium plan\n- Same site support for Lax value\n- Request url with code parameter will be directed to authentication, in case it is required\n- Session handling documentation\n- When application name does not adhere to regex, the request will be directed to main routing configuration file\n \n## 10.7.1 - 2021-08-30\n\n### Added\n- Skip xs-app.json cache support\n- Login with XSUAA certificates \n- Mutual Transport Layer Security (mTLS) handling\n- Single use token support\n\n## 10.6.1 - 2021-08-03\n\n### Fixed\n- Subscription callback requests will be directed to main routing configuration file \n- App. config response headers modify additional headers value\n\n## 10.6.0 - 2021-07-28\n\n### Added\n- HTML5 Application Repository Tenant Awareness support\n\n### Fixed\n- nullifying the Redis client when there's a connection issue with Redis\n- Clear interval when  calling approuter.close()\n\n## 10.5.1 - 2021-07-25\n\n### Fixed\n- Return error immediately when reaches login callback middleware via query parameters\n\n### Updated dependencies\n- deps: urijs@1.19.7\n\n## 10.5.0 - 2021-07-14\n\n### Added\n- Support of the configuration of the minimal logging level for the cf-nodejs-logging-support library\n\n### Fixed\n- Return an error code when calling login callback directly\n- Fix for request traces that crash the application router \n\n## 10.4.3 - 2021-07-05\n\n### Fixed\n- Display log with tenant ID, also when using direct routing URIs\n- Support of session management with redis with multiple nodes plans\n\n## 10.4.2 - 2021-06-13\n\n### Fixed\n- Correcting additional bug when Websocket Proxy is crashing if excluding a route by DIRECT_ROUTING_URI_PATTERN\n\n## 10.4.1 - 2021-06-09\n\n### Fixed\n- Changing \"favico.ico\" to \"favicon.ico\" as a predefined direct routing URI\n- Parsing client certificate for non-CF SMS subscription\n- Improving logs in path-rewriter, request-handler, service-to-approuter-middleware, oauth2-strategy\n- Adding cache-Control header ('no-cache, no-store') to the User API response\n- Correcting a bug when Websocket Proxy is crashing if excluding a route by DIRECT_ROUTING_URI_PATTERN\n\n### Updated dependencies\n- deps: ws@7.4.6\n\n## 10.4.0 - 2021-05-24\n\n### Added\n- External session management support\n\n### Fixed\n- Client certificate handling for non-CF SMS subscription\n- Expose License\n\n## 10.3.0 - 2021-05-11\n\n### Added\n- CLIENT_CERTIFICATE_HEADER_NAME configuration for non CF flows\n- Support of SAP statistics for reporting the request performance\n- AfterRequestHandler and backendTimeout extension support\n\n### Fixed\n- Lazy html5-repo client-credentials token creation in case it could not be created during startup\n- Added \"login\" as a pre-configured direct URI route to prevent unnecessary calls to the HTML5 Application Repository\n\n### Updated dependencies\n- deps: cf-nodejs-logging-support@6.7.0\n\n## 10.2.0 - 2021-04-11\n\n### Added\n- Support of routing directly to the routing configuration file (xs-app.json) of the application router using the DIRECT_ROUTING_URI_PATTERNS environment variable \n- Caching support for destinations from destination service\n\n### Fixed\n- Verify cookie when IAS and XSUAA bound\n- Websockest pong callback handling\n- Empty getDependencies configuration handling in SaaS Registry subscription\n- Handle SMS apiURLs in K8S\n- Encode redirect logout url parameters in case of xsuaa authentication\n\n## 10.1.0 - 2021-03-21\n\n### Added\n- If you are using Identity Authentication (IAS), you can now use subdomains in multitenant URLs\n- Identity Authentication (IAS) is fully supported (no longer a Beta feature)\n\n### Fixed\n- Destination token exchange when using destinations on instance level\n\n## 10.0.0 - 2021-03-10\n\n### Added\n- Support node version 12 and node version 14 instead of node version 10 and node version 12\n\n## 9.4.0 - 2021-03-09\n\n### Added\n- Support the consumption of destinations from the provider subaccount via the preferLocal property\n- Support of cross-origin resource sharing via the application router configuration file (xs-app.json)\n\n### Fixed\n- logout flow while using system plan XSUAA instance\n- missing scope in XSUAA token after refresh\n\n### Updated dependencies\n- deps: lodash@4.17.21\n- deps: @sap/audit-logging@4.2.0\n- deps: @sap/logging@6.0.3\n\n## 9.3.0 - 2021-02-24\n\n### Fixed\n- user-api consumption from local approuter\n- avoid endless loop when calling approuter with /login/callback\n\n### Added\n- Service to approuter is not beta anymore, README file changed\n\n### Updated dependencies\n- deps: urijs@1.19.6\n\n## 9.2.0 - 2021-02-14\n\n### Added\n- Support of custom response headers via the application router configuration file (xs-app.json)\n\n### Fixed\n- Verify application key without query parameters\n\n### Updated dependencies\n- deps: e2e-trace@3.0.0\n- deps: xsenv@3.1.0\n\n## 9.1.0 - 2021-01-21\n\n### Added\n- User API\n\n### Fixed\n- Connectivity authentication issue in IAS flow\n- Initialize server keepAliveTimeout to zero\n\n### Updated dependencies\n-  deps: @sap/audit-logging@3.2.0\n\n## 9.0.2 - 2021-01-14\n\n### Fixed\n- Options handling for extensibility case when html5 repo is bound\n- Logout request handling when approuter session times out\n- Use \"http_header\" section of authTokens from the Destination Service response\n\n### Updated dependencies\n- deps: urijs@1.19.5\n\n## 9.0.1 - 2020-12-20\n\n### Fixed\n- Subprotocol handling in websockets flows\n\n### Updated dependencies\n- deps: validator@13.5.2\n- deps: @sap/logging@6.0.2\n\n## 9.0.0 - 2020-12-06\n\n### Added\n- IAS authentication support\n- Forward IAS token to destination\n- IAS authentication with  XSUAA authorization\n- Subscription manager (SMS) support\n\n### Updated dependencies\n- deps: base64-url@2.3.3\n\n## 8.6.1 - 2020-11-25\n\n### Fixed\n- Wrong application URL protocol returned by onSubscription callback additional fix\n\n## 8.6.0 - 2020-11-19\n\n### Fixed\n- Wrong application URL protocol returned by onSubscription callback\n\n## 8.5.5 - 2020-10-21\n\n### Fixed\n- Destination middleware improvement\n\n## 8.5.4 - 2020-10-14\n\n### Fixed\n- Fix invalid backend response handling\n\n## 8.5.3 - 2020-10-06\n\n### Fixed\n- Do not forward SAP-Connectivity-Authentication header in onPremise flows if destination authentication type is NoAuthentication\n\n## 8.5.2 - 2020-09-21\n\n### Fixed\n- Handle SameSite:None value in client side cookies (signature, locationAfterLogin and fragmentAfterLogin)\n\n## 8.5.1 - 2020-08-25\n\n### Updated dependencies\n- deps: lodash@4.17.20\n- deps: sap/logging@5.3.1\n- deps: cf-nodejs-logging-support@6.4.3\n\n### Fixed\n- Avoid crash if user provided service without credentials\n- Don't forward auth token to connectivity in service2approuter flow if destination.forwardToken = false\n\n## 8.5.0 - 2020-08-10\n\n### Updated dependencies\n- deps: @sap/audit-logging@3.1.1\n- deps: request@2.88.2\n- deps: @sap/xssec@3.0.9\n- deps: lodash@4.17.19\n- deps: ws@7.3.1\n\n### Fixed\n- Pass tenant id in service to approuter audit log message\n\n## 8.4.1 - 2020-08-02\n\n### Fixed\n- Fix token exchange for Business Service access\n\n## 8.4.0 - 2020-08-02\n\n### Added\n- Support merge of approuter and backend content-security-policy headers\n- Support cookie merge in service2Approuter flow\n\n### Fixed\n- Handle undefined user in refresh token flow\n\n## 8.3.1 - 2020-07-26\n\n### Fixed\n- Upgrade xssec version to 3.0.7 - fix big tokens exchange error\n\n## 8.3.0 - 2020-07-23\n\n### Fixed\n- Fix missing subdomain in exchange token\n\n## 8.2.2 - 2020-07-15\n\n### Fixed\n- Adapt to changes in @sap/xssec-3.0.6 - replace secContext private subdomain property by getSubdomain method\n- Fix websocket pong behavior when status is not open\n\n## 8.2.1 - 2020-07-09\n\n### Fixed\n- SAP Passport header handling fixed in service 2 approuter flow\n\n## 8.2.0 - 2020-07-02\n\n### Fixed\n- Passport handling fix in service 2 approuter flow – increment counter\n\n### Updated dependencies\n- deps: sap/xssec@3.0.6\n\n## 8.1.1 - 2020-06-24\n\n### Announcement\n- The Preserve URL fragment (PRESERVE_FRAGMENT) will not be deprecated as previously announced.\n\n### Fixed\n- Bug correction in forwardAuthToken in business service flow\n\n## 8.1.0 - 2020-06-14\n\n### Added\n- Added fallback mechanism for html5 repo client_credentials token refresh\n- Security improvement for signature verifying during login\n\n### Fixed\n- Bug fix when calling connectivity in a non-authenticated flow (no login in approuter)\n\n## 8.0.0 - 2020-05-26\n\n### Updated dependencies\n - deps: @sap/xssec@3.0.3\n\n### Removed\n- Remove of SAP_JWT_TRUST_ACL environment variable support (functionality now comes with audience validation)\n\n## 7.1.3 - 2020-05-17\n\n### Added\n- Enhances of the x-approuter-authorization token security check in the service2Approuter flow.\n\n## 7.1.2 - 2020-05-08\n\n### Fixed\n- Fix appurl usage of x-subscriber-tenant\n\n## 7.1.1 - 2020-05-05\n\n### Added\n- Cache improvements\n- Usage of x-subscriber-tenant header when provided.\n- handle html5 repo and xsuaa destinations separately\n\n### Fixed\n- Fix connectivity token handling for Kubernetes\n\n## 7.1.0 - 2020-04-16\n\n### Added\n- Enable service logout configuration in central xs-app.json.\n### Fixed\n- Destination token cached in session is never refreshed.\n\n## 7.0.0 - 2020-04-06\n\n### Added\n- Support node version 10 and node version 12 instead of node version 8 and node version 10\n\n## 6.8.2 - 2020-03-04\n\n### Fixed\n- Fix extension of resolveUaaConfig\n\n## 6.8.1 - 2020-02-20\n\n### Fixed\n- Fix default route\n\n## 6.8.0 - 2020-02-10\n\n### Added\n- Enable external session manager extensibility when using HTML5 Repository\n\n## 6.7.2 - 2020-01-30\n\n### Added\n- Support SameSite cookie attribute\n\n### Updated dependencies\n - deps: express-session@1.17.0\n - deps: @sap/logging@5.2.0\n\n## 6.7.1 - 2019-12-24\n\n### Added\n- Backend cookies secret variable (BACKEND_COOKIES_SECRET) Secret that is used to encrypt backend session cookies in service to Application Router flow. Should be set in case multiple instances of Application Router are used. By default a random sequence of characters is used.\n\n\n## 6.7.0 - 2019-11-24\n\n### Added\n- Enhance the use of the xsenv@2.1.0 library to access bound destination service credentials, which support reading destination service credentials in Kubernetes.\n\n### Fixed\n- Anonymous login on destination flow\n\n## 6.6.0 - 2019-11-12\n\n### Announcement\n- The Preserve URL fragment (PRESERVE_FRAGMENT) is being deprecated and will be removed in the near future\n\n### Updated dependencies\n- deps: sap/xsenv@2.1.0 Application Router uses xsenv library to access bound services credentials. We have upgraded the library to xsenv version 2.1.0 which supports reading credentials in Kubernetes.\n- deps: https-proxy-agent@2.2.4\n## 6.5.1 - 2019-10-10\n\n### Fixed\n- Adding sec-websocket-protocol header as the protocol of websockets\n\n## 6.5.0 - 2019-10-03\n\n### Added\n- Timeout for Business Service\n\n### Fixed\n- Adding destination token middleware for websockets\n\n## 6.4.1 - 2019-09-23\n\n### Fixed\n- CSP header fix return frame-ancestors in login\n\n## 6.4.0 - 2019-09-16\n\n### Added\n- Allowed dynamic destinations \n- Return CSP header with no cache\n- Added setXForwardedHeaders option\n\n## 6.3.0 - 2019-09-10\n\n### Added\n- Support Cache-Control for static content from html5-repo\n\n## 6.2.0 - 2019-09-03\n\n### Added\n- Support Subscription url from vcap.\n- Adding validation - Session created for one tenant must not be used by other tenants\n\n### Updated dependencies\n - deps: @sap/xssec@2.2.2\n\n## 6.1.2 - 2019-08-28\n- Support Xsuaa credentials in request body\n\n## 6.1.1 - 2019-08-27\n- Fix in destination middleware - session.update\n \n## 6.1.0 - 2019-07-31\n\n### Added\n- Support for redirection to logout page with query parameters after central logout\n- Connectivity is now returned in subscription getDependencies callback\n\n### Fixed\n- Error when processing unknown authentication types\n\n## 6.0.2 - 2019-07-14\n\n### Fixed\n- Validation of destination with OnPremise proxyType\n- CSRF protection in Service to Approuter flow\n### Updated dependencies\n- deps: lodash@4.17.13\n\n## 6.0.1 - 2019-05-30\n\n### Fixed\n- Fixed TypeError bug when Approuter saves a cookie from backend and should logout when session timeout exceeded. \n- Fixed calculation of location after login.\n\n## 6.0.0 - 2019-05-06\n\n### Added\n- Support node version 8 and node version 10 instead of node version 4.5 and node version 6\n\n## 5.15.0 - 2019-04-29\n\n### Added\n- Support for Service to Application Router functionality (Beta version).\n- Added destination in host support.\n\n## 5.14.1 - 2019-04-17\n\n### Added\n- Enhanced Approuter application logs when serving of static content (from HTML5 App Repo) was failed.\n\n### Fixed\n- Fixed subscription callbacks url.\n\n## 5.14.0 - 2019-04-04\n\n### Added\n- Websockets support for HTML5 Application Repository.\n\n### Fixed\n- onSubscription callback.\n\n## 5.13.1 - 2019-03-27\n\n### Added\n- Added automatic recovery of Approuter after recovery of UAA.\n\n### Fixed\n- Fixed subscription callbacks url.\n- Fixed avoid central appConfig routes overrides.\n\n### Updated dependencies\n - deps: @sap/xssec@2.1.16\n\n## 5.13.0 - 2019-02-14\n\n### Added\n- Ability to define identity provider for authentication in the route.\n\n## 5.12.0 - 2019-02-05\n\n### Added\n- Dynamic destination support.\n\n## 5.11.0 - 2019-01-22\n\n### Added\n- Client credentials token support.\n\n## 5.10.2 - 2019-01-08\n\n### Fixed\n- Fix proxy issue in Connectivity flow.\n\n## 5.10.1 - 2019-01-03\n\n### Fixed\n- Fixed flow of access destination via desination service.\n\n## 5.10.0 - 2018-12-30\n\n### Added\n- Propagation of approuter host during logout.\n\n## 5.9.0 - 2018-12-18\n\n### Added\n- Ability to change destination without restarting application on CF\n- Access destination that is exposed on destination service instance level.\n- Enabled all authentication types defined in the destination service.\n\n## 5.8.0 - 2018-10-27\n\n### Fixed\n- Fix login flow for URLs with empty query (URL that ends with '?').\n\n### Added\n- Documentation of integration with HTML5 Apps Repo.\n\n### Updated dependencies\n - deps: ws@1.1.5\n - deps: lodash@4.17.11\n - deps: @sap/logging@4.0.2\n    - deps: lodash@4.17.11\n\n## 5.7.0 - 2018-10-08\n\n### Added\n - Propagate client id to UAA during Logout\n \n## 5.6.4 - 2018-08-27\n\n### Updated dependencies\n- deps: @sap/audit-logging@2.2.4\n- deps: sync-request@5.0.0\n     \n### Fixed\n- Duplicate destination names in xs-app.json bug\n\n## 5.6.3 - 2018-08-15\n\n### Updated dependencies\n - deps: e2e-trace@1.3.0\n - deps: xssec@2.1.15\n    - deps: request@2.88.0\n\n### Fixed\n - Fix bug of post/put requests with content/type=application/json\n\n## 5.6.2 - 2018-08-09\n\n### Updated dependencies\n - deps: serve-static@1.13.2\n    - deps: send@0.16.1\n\t     - deps: mime@1.4.1\n\t     - \tdeps: debug@2.6.9\n\n### Fixed\n - Fix error in case of local destination and UAA with tenant mode shared\n \n## 5.6.1 - 2018-08-07\n\n### Updated dependencies\n - deps: body-parser@1.18.3\n - deps: uid-safe@2.1.5\n - deps: @sap/xssec@2.1.9\n - deps: send@0.16.2\n - deps: compression@1.7.3\n - deps: express-session@1.15.6\n - deps: connect@3.6.5\n\n## 5.6.0 - 2018-08-05\n\n### Added\n - Added SaaS application registration support (subscription)\n - Enhanced usage of PreserveHostHeader additional property\n\n### Fixed\n - Fix error handling in case of bad signature\n\n## 5.5.0 - 2018-07-19\n\n### Added\n - Added optional additional properties 'PreserveHostHeader' to Destination service\n - Added optional additional properties 'sap-client' to Destination service\n\n## 5.4.2 - 2018-07-04\n\n### Fixed\n - Fix refresh page location after timeout bug\n - Fix fragment cookie name bug\n - Fix vulnerabilities issues\n \n## 5.4.1 - 2018-06-25\n \n### Fixed\n - Fix logout bug\n\n## 5.4.0 - 2018-06-10\n\n### Added\n - Support extensibility of logout end-point \n \n### Fixed\n - Fix vulnerabilities issues\n\n## 5.3.0 - 2018-05-13\n\n### Added\n - Enable extended session management\n - Enable Correlation ID propagation\n\n## 5.2.1 - 2018-05-02\n\n### Added\n - Support audit log service\n\n## 5.2.0 - 2018-04-16\n\n### Added\n - Support routing to destination with authentication type OAuth2SAMLBearerAssertion\n\n### Fixed\n - Fix bug in forward undefine token\n\n\n## 5.1.0 - 2018-03-14\n\n### Added\n - Support destination configuration from destination service\n\n### Fixed\n - Fix bug in trace functionality\n - Fix bug in fragment functionality\n\n## 5.0.0 - 2018-01-29\n\n### Fixed\n - Minor fix in destinations handling in Extension flow.\n - Fix fragment handling in URL during Login flow.\n \n## 4.0.1 - 2018-01-01\n\n### Fixed\n - Minor fixes in CORs.\n\n## 4.0.0 - 2017-12-18\n\n### Added\n - Application router can consume content from the HTML5 application repository.\n\n### Fixed\n - Fix in headers handling when using CF destination and onPremise destination in same xs-app.json.\n - Minor fix in CORs.\n\n## 3.0.1 - 2017-10-08\n\n### Removed\n - Node 0.12 support.\n \n## 2.10.0 - 2017-07-30\n\n### Added\n - Enabled connectivity to on premise backend.\n - Added external reverse proxy support.\n\n### Fixed\n - Fix CSRF token generation to use a Secure Random number generator.\n\n## 2.9.1 - 2017-06-29\n\n### Fixed\n - Minor fixes in CORs.\n - Introduce CORs feature in README.md.\n \n## 2.9.0 - 2017-06-27\n\n### Added\n - Support for CORs functionality.\n\n## 2.8.2 - 2017-06-13\n\n### Fixed\n - Fix cancel request.\n - Fix logout in dynamic routing.\n\n## 2.8.1 - 2017-06-01\n\n### Fixed\n - Fixes in documentation of dynamic routing and troubleshooting section.\n - Fix logout when using websocket.\n\n## 2.8.0 - 2017-04-26\n\n### Added\n - Introduce table of contents in README.md.\n - Added JWT refresh in websocket connections.\n - Significant performance improvements via adopting @sap/logging version 3\n\n## 2.7.1 - 2017-03-20\n\n### Fixed\n - Add username to logs.\n - Minor fixes in websockets and session handling.\n\n## 2.7.0 - 2017-02-13\n\n### Added\n- Replacements from services.\n- Start approuter on https\n- Show warning when a route is explicitly both public and csrf protected.\n\n### Fixed\n- Should not escape client cookies.\n- Redirect to welcome page if not CSRF token fetch request.\n- Wrong basic authentication status codes.\n\n## 2.6.1 - 2017-01-25\n\n### Changed\n- Rename package to use @sap scope\n\n## 2.6.0 - 2017-01-25\n\n### Added\n- `REQUEST_TRACE` environment variable for enhanced request tracing.\n- Support for PATCH in router configuration.\n- New extensions - see extending.md.\n\n### Removed\n- Customizable UAA config resolution.\n\n### Fixed\n- Fixes in documentation.\n- Handling of request protocol.\n- Removed npm 2 restriction.\n\n## 2.5.0 - 2016-12-13\n\n### Added\n- Enable customizable UAA config resolution\n- Support for custom error pages (errorPage in xs-app.json)\n- Extend sizing guide\n\n### Fixed\n- Crash in error handler due to missing logger.\n- Does not cache login responses.\n- Does not log UAA missing when not needed.\n- In case of parallel logins Approuter may use wrong user.\n- Does not send basic credentials to backend, unless route is public.\n\n## 2.4.0 - 2016-11-16\n\n### Added\n- Introduce SECURE_SESSION_COOKIE environment variable - enforces the secure flag of application router's session cookie.\n- Additional checks for regular expressions during startup.\n\n### Changed\n- Previous component name in sap passport has been changed to 'XSA Approuter'.\n\n### Fixed\n - Missing logging context in error handler when using extensions.\n\n## 2.3.4 - 2016-11-04\n\n### Fixed\n- The _x-csrf-token_ header is no longer forwarded to backend in case a path requires authentication and CSRF token protection.\n- Set the _Secure_ flag of the session cookie depending on the environment application router runs in.\n- Some of the links in README.md were broken.\n\n## 2.3.3 - 2016-11-02\n\n### Added\n-\tAdd COMPRESSION env var to be able to configure compression.\n\n### Fixed\n- Do not cache wsAllowedOrigins across requests.\n- Favor UAA config from default-env.json over default-services.json.\n-\tExtend error message for proxy settings problem.\n-\tEnable compression by default when custom setting is provided.\n-\tPropagate errors to handler.\n- Avoid session resave at the end of request. Fix session overwrite.\n\n## 2.3.2 - 2016-09-30\n\n### Fixed\n- Cookie locationAfterLogin clash in port based routing.\n\n## 2.3.1 - 2016-09-28\n\n### Fixed\n- Unverified redirect via locationAfterLogin cookie.\n- Fallback to default UAA if no tenant captured.\n- Fix X-Frame-Options header overwriting.\n- Session cookie name - use application_id instead of instance_id.\n- Fix port validation for approuter.start().\n\n## 2.3.0 - 2016-09-02\n\n### Added\n- Multitenancy support.\n- Matching route by both URL path and HTTP method.\n\n### Fixed\n- Fixed race condition while CSRF token generation.\n\n## 2.2.0 - 2016-08-17\n\n### Added\n- Start approuter with xs-app.json passed as an object.\n- Follow symlinks in localDir config.\n- Document the Content-Security-Policy header as a best practice.\n\n## 2.1.3 - 2016-08-13\n\n### Added\n- Genarate CSRF token once per session.\n\n## 2.1.2 - 2016-08-06\n\n### Fixed\n- Remove instance cookies from client request.\n- Fix locatioinAfterLogin cookie path.\n\n## 2.1.1 - 2016-07-24\n\n### Fixed\n- Support to host welcome page externally.\n- Fix logout path matching.\n- Fix 500 sent in case locationAfterLogin cookie is missing.\n\n\n## 2.1.0 - 2016-07-17\n\n### Added\n- Allow source of route to be matched in case-insensitive way.\n- New configuration for maximum client connection timeout.\n- Add support for approuter extensions (custom middleware).\n- Allow fetching CSRF token with HEAD request.\n\n## 2.0.0 - 2016-05-12\n\n### Added\n- Configuration for the Cache-Control header in xs-app.json. The header is used when serving static resources.\n\n### Removed\n- local-* files (e.g. local-destinations, local-plugins) can no longer be used in the approuter during local development. Instead of these the approuter reads a single file located in the working directory (default-env.json), which contains the corresponding environment variables (e.g. destinations, plugins) and their values.\n"
    },
    {
      "name": "artifact-management-base-types",
      "type": "module",
      "gitHubOwner": "gregorwolf",
      "gitHubRepo": "SAP-NPM-API-collection",
      "forks": 6,
      "stars": 15,
      "addedToBoUI5": "",
      "createdAt": "2018-09-07T15:27:07Z",
      "updatedAt": "2022-04-28T12:42:58Z",
      "readme": "# Introduction\nThis package contains type definitions for [artifact-management-base](https://www.npmjs.com/package/@sap/artifact-management-base).\n\n# Usage\n npm i @sap/artifact-management-base-types"
    },
    {
      "name": "artifact-management-base",
      "type": "module",
      "gitHubOwner": "gregorwolf",
      "gitHubRepo": "SAP-NPM-API-collection",
      "forks": 6,
      "stars": 15,
      "addedToBoUI5": "",
      "createdAt": "2018-09-07T15:27:07Z",
      "updatedAt": "2022-04-28T12:42:58Z",
      "readme": "# Introduction\nThis package contains helper classes/methods that are used by [artifact-management](https://www.npmjs.com/package/@sap/artifact-management) and plugins.\nThis serves as the dependency for artifact-management and plugins.",
      "changelog": "## 1.10.0 - 7 April, 2022\n* Version update for `@sap/artifact-managment@1.10.0`\n## 1.9.0 - 24 March, 2022\n* Version update for `@sap/artifact-managment@1.9.0`\n## 1.8.1 - 17 March, 2022\n* Version update for `@sap/artifact-managment@1.8.1`\n## 1.8.0 - 10 March, 2022\n* Version update for `@sap/artifact-managment@1.8.0`\n## 1.7.0 - 24 February, 2022\n* Version update for `@sap/artifact-managment@1.7.0`\n## 1.6.0 - 10 February, 2022\n* Version update for `@sap/artifact-managment@1.6.0`\n## 1.5.0 - 28 January, 2022\n* Version update for `@sap/artifact-managment@1.5.0`\n## 1.4.0 - 07 January, 2022\n* Version update for `@sap/artifact-managment@1.4.0`\n## 1.3.0 - 22 December, 2021\n* Version update for `@sap/artifact-managment@1.3.0`\n## 1.2.0 - 24 November, 2021\n* Version update for `@sap/artifact-managment@1.2.0`\n## 1.1.1 - 15 November, 2021\n### Changed\n* Remove import of `ReflectedModel` from cds and changed the type of csn object to `any`.\n* Updated chokidar version from `3.5.1` to `3.5.2`.\n\n## 1.1.0 - 25 October, 2021\n* Initial release.\n"
    }
  ],
  "tags": []
}
